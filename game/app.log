DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@58ff0584
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@58ff0584
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@58ff0584
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1705517a
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@6a3404f7
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@79ce4bc8
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@64737442
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@64737442
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@64737442
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@337bcd9b
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@337bcd9b
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@337bcd9b
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@4cb5f544
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@4cb5f544
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@4cb5f544
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@4af0dd6f
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@4af0dd6f
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@4af0dd6f
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@245cc2fa
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@245cc2fa
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@245cc2fa
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@5bc3e2e8
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@5bc3e2e8
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@5bc3e2e8
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a5ff32f
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a5ff32f
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a5ff32f
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@620b7415
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@620b7415
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1e394dbd
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1e394dbd
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@2a2465b5
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@2a2465b5
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@2a75c1e7
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a75c1e7
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@b9a4e3a
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@b9a4e3a
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@3f875048
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@3f875048
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@6dbac10
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@6dbac10
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@6dbac10
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@45d1cf37
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@5e5bfaaf
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@5e5bfaaf
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@5e5bfaaf
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@3012f4f
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@786c55ec
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@786c55ec
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@469e40ac
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@469e40ac
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@614a6886
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@614a6886
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@68a6dd65
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@68a6dd65
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@7dae85bd
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@7dae85bd
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@11398802
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@4a6b2b8
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@2fad0acb
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@2fad0acb
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@2fad0acb
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@3959ee44
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@3959ee44
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@3959ee44
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@1eebcd3b
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@21e041eb
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@21e041eb
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@21e041eb
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4d84a6bf
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4d84a6bf
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4d84a6bf
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@54740053
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@4d89dc78
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@4d89dc78
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@29d72933
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@6a9426a7
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@6a9426a7
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@671d1959
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@7112024b
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@125416ab
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@125416ab
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@50f8681
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@37dc29c5
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@3d932af6
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@5d6fed65
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@242d53c7
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7269c486
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@560984a7
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@742f4fc6
INFO-> Hibernate Commons Annotations 3.2.0.Final
INFO-> Hibernate 3.6.0.Final
INFO-> hibernate.properties not found
INFO-> Bytecode provider name : javassist
INFO-> using JDK 1.4 java.sql.Timestamp handling
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
INFO-> Hibernate EntityManager 3.6.0.Final
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@58ff0584
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@58ff0584
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@58ff0584
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1705517a
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@6a3404f7
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@79ce4bc8
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@64737442
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@64737442
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@64737442
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@337bcd9b
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@337bcd9b
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@337bcd9b
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@4cb5f544
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@4cb5f544
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@4cb5f544
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@4af0dd6f
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@4af0dd6f
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@4af0dd6f
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@245cc2fa
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@245cc2fa
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@245cc2fa
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@5bc3e2e8
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@5bc3e2e8
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@5bc3e2e8
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a5ff32f
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a5ff32f
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a5ff32f
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@620b7415
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@620b7415
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1e394dbd
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1e394dbd
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@2a2465b5
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@2a2465b5
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@2a75c1e7
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@2a75c1e7
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@b9a4e3a
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@b9a4e3a
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@3f875048
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@3f875048
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@6dbac10
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@6dbac10
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@6dbac10
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@45d1cf37
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@5e5bfaaf
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@5e5bfaaf
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@5e5bfaaf
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@3012f4f
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@786c55ec
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@786c55ec
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@469e40ac
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@469e40ac
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@614a6886
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@614a6886
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@68a6dd65
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@68a6dd65
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@7dae85bd
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@7dae85bd
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@11398802
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@4a6b2b8
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@2fad0acb
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@2fad0acb
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@2fad0acb
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@3959ee44
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@3959ee44
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@3959ee44
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@1eebcd3b
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@21e041eb
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@21e041eb
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@21e041eb
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4d84a6bf
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4d84a6bf
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4d84a6bf
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@54740053
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@4d89dc78
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@4d89dc78
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@29d72933
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@6a9426a7
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@6a9426a7
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@671d1959
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@7112024b
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@125416ab
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@125416ab
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@3b047fad
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@16c6d66e
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@2bd963d7
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@566a8e55
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@4e8b6a22
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@6e5eb03b
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@e79b1fc
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@c638e40
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
DEBUG-> Look up for persistence unit: trivial4b
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Searching mapped entities in jar/par: file:/C:/Users/Smooth/1/Trivial4b/game/target/classes/
DEBUG-> Filtering: es.uniovi.asw.trivial.db.DBManager
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.LocalHSQLDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.PartidaFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.SimplePersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.UsuarioFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PartidaFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.UsuarioFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.util.Jpa
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.infrastucture.Factories
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.JustLoadHibernate
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.type.UsuarioPartidaKey
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.remote.RemoteMongoDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.LocalDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.RemoteDB
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.DBFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.GrafoFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.TableroFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Grafo
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Trivial
DEBUG-> Filtering: es.uniovi.asw.trivial.main.Main
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaGame
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Action
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Casilla
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAjustes
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.ModeloNoEditable
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$5
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$6
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$7
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$8
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$9
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal
DEBUG-> File Filter matched for META-INF/orm.xml
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Creating Factory: trivial4b
DEBUG-> trying to resolve system-id [file:///C:/Users/Smooth/1/Trivial4b/game/orm_2_0.xsd]
INFO-> Binding Named query: Usuario.findAll => select u from Usuario u
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Pregunta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta on table TPREGUNTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=categoria, insertable=true, updatable=true, unique=false}
DEBUG-> binding property categoria with lazy=false
DEBUG-> building SimpleValue for categoria
DEBUG-> Building property categoria
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property pregunta with lazy=false
DEBUG-> building SimpleValue for pregunta
DEBUG-> Building property pregunta
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='respuestas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Building property respuestas
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Ranking
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking on table TRANKING
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='PARTIDA_ID', referencedColumn='', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='pregunta_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Building property pregunta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Respuesta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta on table TRESPUESTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=correcta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property correcta with lazy=false
DEBUG-> building SimpleValue for correcta
DEBUG-> Building property correcta
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=respuesta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property respuesta with lazy=false
DEBUG-> building SimpleValue for respuesta
DEBUG-> Building property respuesta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Usuario
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario on table TUSUARIOS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=contrasenia, insertable=true, updatable=true, unique=false}
DEBUG-> binding property contrasenia with lazy=false
DEBUG-> building SimpleValue for contrasenia
DEBUG-> Building property contrasenia
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=nombre, insertable=true, updatable=true, unique=false}
DEBUG-> binding property nombre with lazy=false
DEBUG-> building SimpleValue for nombre
DEBUG-> Building property nombre
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Partida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida on table TPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=puntuacion, insertable=true, updatable=true, unique=false}
DEBUG-> binding property puntuacion with lazy=false
DEBUG-> building SimpleValue for puntuacion
DEBUG-> Building property puntuacion
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=ranking, insertable=true, updatable=true, unique=false}
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name UsuariosPartida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida on table TUSUARIOSPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property partida with lazy=false
DEBUG-> building SimpleValue for partida
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Building property usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for categoria
DEBUG-> Setting SimpleValue typeName for pregunta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for correcta
DEBUG-> Setting SimpleValue typeName for respuesta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for contrasenia
DEBUG-> Setting SimpleValue typeName for nombre
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for puntuacion
DEBUG-> Setting SimpleValue typeName for partida
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta through an association table
DEBUG-> Mapped collection key: TRANKING_id, element: pregunta_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas through an association table
DEBUG-> Mapped collection key: TPREGUNTAS_id, element: respuestas_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.usuario
DEBUG-> Mapped collection key: usuario_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.partida
DEBUG-> Mapped collection key: partida_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Building property ranking
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
INFO-> Hibernate Validator not found: ignoring
DEBUG-> No JNDI name configured for binding Ejb3Configuration
DEBUG-> Preparing to build session factory with filters : {}
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Legacy Validator not present in classpath, ignoring event listener registration
DEBUG-> Search not present in classpath, ignoring event listener registration.
INFO-> Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
INFO-> Using Hibernate built-in connection pool (not for production use!)
INFO-> Hibernate connection pool size: 20
INFO-> autocommit mode: true
INFO-> using driver: org.hsqldb.jdbcDriver at URL: jdbc:hsqldb:hsql://localhost
INFO-> connection properties: {user=sa, autocommit=true, release_mode=auto}
DEBUG-> opening new JDBC connection
DEBUG-> created connection to: jdbc:hsqldb:hsql://localhost, Isolation Level: 2
INFO-> Database ->
       name : HSQL Database Engine
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Using dialect: org.hibernate.dialect.HSQLDialect
INFO-> Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
INFO-> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
INFO-> Automatic flush during beforeCompletion(): disabled
INFO-> Automatic session close at end of transaction: disabled
INFO-> JDBC batch size: 15
INFO-> JDBC batch updates for versioned data: disabled
INFO-> Scrollable result sets: enabled
DEBUG-> Wrap result sets: disabled
INFO-> JDBC3 getGeneratedKeys(): enabled
INFO-> Connection release mode: auto
INFO-> Default batch fetch size: 1
INFO-> Generate SQL with comments: disabled
INFO-> Order SQL updates by primary key: disabled
INFO-> Order SQL inserts for batching: disabled
INFO-> Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
INFO-> Using ASTQueryTranslatorFactory
INFO-> Query language substitutions: {}
INFO-> JPA-QL strict compliance: enabled
INFO-> Second-level cache: enabled
INFO-> Query cache: disabled
INFO-> Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
INFO-> Optimize cache for minimal puts: disabled
INFO-> Structured second-level cache entries: disabled
INFO-> Statistics: disabled
INFO-> Deleted entity synthetic identifier rollback: disabled
INFO-> Default entity-mode: pojo
INFO-> Named query checking : enabled
INFO-> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
INFO-> building session factory
DEBUG-> Statistics initialized [enabled=false]}
DEBUG-> Session factory constructed with filter configurations : {}
DEBUG-> instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:hsqldb:hsql://localhost, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.ejb.discard_pc_on_close=false, hibernate.transaction.flush_before_completion=false, os.name=Windows 7, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_31\lib\resources.jar;C:\Program Files\Java\jre1.8.0_31\lib\rt.jar;C:\Program Files\Java\jre1.8.0_31\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_31\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_31\lib\jce.jar;C:\Program Files\Java\jre1.8.0_31\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_31\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_31\classes, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, java.runtime.version=1.8.0_31-b13, hibernate.connection.autocommit=true, javax.persistence.jdbc.user=sa, user.name=Smooth, hibernate.connection.release_mode=auto, user.language=es, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_31\bin, java.version=1.8.0_31, user.timezone=Europe/Paris, sun.arch.data.model=64, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_31\lib\endorsed, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=52.0, user.country=ES, java.home=C:\Program Files\Java\jre1.8.0_31, java.vm.info=mixed mode, os.version=6.1, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=25.31-b07, javax.persistence.jdbc.url=jdbc:hsqldb:hsql://localhost, user.variant=, sun.awt.enableExtraMouseButtons=true, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=sa, user.script=, user.home=C:\Users\Smooth, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=create, java.library.path=C:\Program Files\Java\jre1.8.0_31\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Java\jdk1.7.0_25\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\AMD\ATI.ACE\Core-Static;C:\apache-maven-3.3.1\bin;C:\Users\Smooth\Desktop\eclipseASW;;., java.vendor.url=http://java.oracle.com/, hibernate.connection.driver_class=org.hsqldb.jdbcDriver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=es.uniovi.asw.trivial.main.Main, java.class.path=C:\Users\Smooth\1\Trivial4b\game\target\classes;C:\Users\Smooth\1\Trivial4b\game\lib\antlr-2.7.6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\commons-collections-3.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\dom4j-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hibernate3.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hsqldb.jar;C:\Users\Smooth\1\Trivial4b\game\lib\javassist-3.12.0.GA.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jbossall-client.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jsp-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl-1.2.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jta-1.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\log4j-1.2.13.jar;C:\Users\Smooth\1\Trivial4b\game\lib\ojdbc6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\servlet-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-api-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-log4j12-1.6.1.jar;C:\Users\Smooth\.m2\repository\org\mongodb\mongo-java-driver\2.13.0\mongo-java-driver-2.13.0.jar;C:\Users\Smooth\.m2\repository\org\jgrapht\jgrapht-core\0.9.0\jgrapht-core-0.9.0.jar;C:\Users\Smooth\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.8, sun.cpu.endian=little, javax.persistence.jdbc.driver=org.hsqldb.jdbcDriver, sun.os.patch.level=Service Pack 1, java.io.tmpdir=C:\Users\Smooth\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, os.arch=amd64, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=C:\Program Files\Java\jre1.8.0_31\lib\ext;C:\Windows\Sun\Java\lib\ext, javax.persistence.jdbc.password=, user.dir=C:\Users\Smooth\1\Trivial4b\game, line.separator=
, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.8}
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG->  Version select: select id from TPREGUNTAS where id =?
DEBUG->  Snapshot select: select pregunta_.id, pregunta_.categoria as categoria0_, pregunta_.pregunta as pregunta0_ from TPREGUNTAS pregunta_ where pregunta_.id=?
DEBUG->  Insert 0: insert into TPREGUNTAS (categoria, pregunta, id) values (?, ?, ?)
DEBUG->  Update 0: update TPREGUNTAS set categoria=?, pregunta=? where id=?
DEBUG->  Delete 0: delete from TPREGUNTAS where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG->  Version select: select partida_id, usuario_id from TUSUARIOSPARTIDA where partida_id =? and usuario_id =?
DEBUG->  Snapshot select: select usuariospa_.partida_id, usuariospa_.usuario_id from TUSUARIOSPARTIDA usuariospa_ where usuariospa_.partida_id=? and usuariospa_.usuario_id=?
DEBUG->  Insert 0: insert into TUSUARIOSPARTIDA (partida_id, usuario_id) values (?, ?)
DEBUG->  Update 0: null
DEBUG->  Delete 0: delete from TUSUARIOSPARTIDA where partida_id=? and usuario_id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG->  Version select: select id from TRANKING where id =?
DEBUG->  Snapshot select: select ranking_.id, ranking_.PARTIDA_ID as PARTIDA2_1_ from TRANKING ranking_ where ranking_.id=?
DEBUG->  Insert 0: insert into TRANKING (PARTIDA_ID, id) values (?, ?)
DEBUG->  Update 0: update TRANKING set PARTIDA_ID=? where id=?
DEBUG->  Delete 0: delete from TRANKING where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG->  Version select: select id from TUSUARIOS where id =?
DEBUG->  Snapshot select: select usuario_.id, usuario_.contrasenia as contrase2_3_, usuario_.nombre as nombre3_, usuario_.usuario as usuario3_ from TUSUARIOS usuario_ where usuario_.id=?
DEBUG->  Insert 0: insert into TUSUARIOS (contrasenia, nombre, usuario, id) values (?, ?, ?, ?)
DEBUG->  Update 0: update TUSUARIOS set contrasenia=?, nombre=?, usuario=? where id=?
DEBUG->  Delete 0: delete from TUSUARIOS where id=?
DEBUG->  Identity insert: insert into TUSUARIOS (id, contrasenia, nombre, usuario) values (default, ?, ?, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG->  Version select: select id from TPARTIDA where id =?
DEBUG->  Snapshot select: select partida_.id, partida_.puntuacion as puntuacion4_ from TPARTIDA partida_ where partida_.id=?
DEBUG->  Insert 0: insert into TPARTIDA (puntuacion, id) values (?, ?)
DEBUG->  Update 0: update TPARTIDA set puntuacion=? where id=?
DEBUG->  Delete 0: delete from TPARTIDA where id=?
DEBUG->  Identity insert: insert into TPARTIDA (id, puntuacion) values (default, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG->  Version select: select id from TRESPUESTAS where id =?
DEBUG->  Snapshot select: select respuesta_.id, respuesta_.correcta as correcta2_, respuesta_.respuesta as respuesta2_ from TRESPUESTAS respuesta_ where respuesta_.id=?
DEBUG->  Insert 0: insert into TRESPUESTAS (correcta, respuesta, id) values (?, ?, ?)
DEBUG->  Update 0: update TRESPUESTAS set correcta=?, respuesta=? where id=?
DEBUG->  Delete 0: delete from TRESPUESTAS where id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set partida_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=? and usuario_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG->  Row insert: insert into TRANKING_TPREGUNTAS (TRANKING_id, pregunta_id) values (?, ?)
DEBUG->  Row update: update TRANKING_TPREGUNTAS set pregunta_id=? where TRANKING_id=? and pregunta_id=?
DEBUG->  Row delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=? and pregunta_id=?
DEBUG->  One-shot delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG->  Row insert: insert into TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id, respuestas_id) values (?, ?)
DEBUG->  Row update: update TPREGUNTAS_TRESPUESTAS set respuestas_id=? where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  Row delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  One-shot delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set usuario_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=? and partida_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [NONE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [READ]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE_NOWAIT]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [FORCE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_READ]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_WRITE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [NONE]: select usuariospa0_.partida_id as partida1_5_3_, usuariospa0_.usuario_id as usuario2_5_3_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_, ranking2_.id as id1_1_, ranking2_.PARTIDA_ID as PARTIDA2_1_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [READ]: select usuariospa0_.partida_id as partida1_5_3_, usuariospa0_.usuario_id as usuario2_5_3_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_, ranking2_.id as id1_1_, ranking2_.PARTIDA_ID as PARTIDA2_1_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE]: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE_NOWAIT]: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [FORCE]: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_READ]: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_WRITE]: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC]: select usuariospa0_.partida_id as partida1_5_3_, usuariospa0_.usuario_id as usuario2_5_3_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_, ranking2_.id as id1_1_, ranking2_.PARTIDA_ID as PARTIDA2_1_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_5_3_, usuariospa0_.usuario_id as usuario2_5_3_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_, ranking2_.id as id1_1_, ranking2_.PARTIDA_ID as PARTIDA2_1_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_5_0_, usuariospa0_.usuario_id as usuario2_5_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id1_1_, ranking0_.PARTIDA_ID as PARTIDA2_1_1_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [READ]: select ranking0_.id as id1_1_, ranking0_.PARTIDA_ID as PARTIDA2_1_1_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE]: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE_NOWAIT]: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [FORCE]: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_READ]: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_WRITE]: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC]: select ranking0_.id as id1_1_, ranking0_.PARTIDA_ID as PARTIDA2_1_1_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id1_1_, ranking0_.PARTIDA_ID as PARTIDA2_1_1_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id1_0_, ranking0_.PARTIDA_ID as PARTIDA2_1_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id1_1_, ranking0_.PARTIDA_ID as PARTIDA2_1_1_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.PARTIDA_ID=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [NONE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [READ]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE_NOWAIT]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [FORCE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_READ]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_WRITE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [NONE]: select partida0_.id as id4_1_, partida0_.puntuacion as puntuacion4_1_, ranking1_.id as id1_0_, ranking1_.PARTIDA_ID as PARTIDA2_1_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [READ]: select partida0_.id as id4_1_, partida0_.puntuacion as puntuacion4_1_, ranking1_.id as id1_0_, ranking1_.PARTIDA_ID as PARTIDA2_1_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE]: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE_NOWAIT]: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [FORCE]: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_READ]: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_WRITE]: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_FORCE_INCREMENT]: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC]: select partida0_.id as id4_1_, partida0_.puntuacion as puntuacion4_1_, ranking1_.id as id1_0_, ranking1_.PARTIDA_ID as PARTIDA2_1_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC_FORCE_INCREMENT]: select partida0_.id as id4_1_, partida0_.puntuacion as puntuacion4_1_, ranking1_.id as id1_0_, ranking1_.PARTIDA_ID as PARTIDA2_1_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id4_0_, partida0_.puntuacion as puntuacion4_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [NONE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [READ]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE_NOWAIT]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [FORCE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_READ]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_WRITE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas: select partidas0_.partida_id as partida1_4_2_, partidas0_.partida_id as partida1_2_, partidas0_.usuario_id as usuario2_2_, partidas0_.partida_id as partida1_5_1_, partidas0_.usuario_id as usuario2_5_1_, usuario1_.id as id3_0_, usuario1_.contrasenia as contrase2_3_0_, usuario1_.nombre as nombre3_0_, usuario1_.usuario as usuario3_0_ from TUSUARIOSPARTIDA partidas0_ inner join TUSUARIOS usuario1_ on partidas0_.usuario_id=usuario1_.id where partidas0_.partida_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta: select pregunta0_.TRANKING_id as TRANKING1_1_1_, pregunta0_.pregunta_id as pregunta2_1_, pregunta1_.id as id0_0_, pregunta1_.categoria as categoria0_0_, pregunta1_.pregunta as pregunta0_0_ from TRANKING_TPREGUNTAS pregunta0_ inner join TPREGUNTAS pregunta1_ on pregunta0_.pregunta_id=pregunta1_.id where pregunta0_.TRANKING_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas: select respuestas0_.TPREGUNTAS_id as TPREGUNTAS1_0_1_, respuestas0_.respuestas_id as respuestas2_1_, respuesta1_.id as id2_0_, respuesta1_.correcta as correcta2_0_, respuesta1_.respuesta as respuesta2_0_ from TPREGUNTAS_TRESPUESTAS respuestas0_ inner join TRESPUESTAS respuesta1_ on respuestas0_.respuestas_id=respuesta1_.id where respuestas0_.TPREGUNTAS_id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas: select partidas0_.usuario_id as usuario2_3_3_, partidas0_.partida_id as partida1_3_, partidas0_.usuario_id as usuario2_3_, partidas0_.partida_id as partida1_5_2_, partidas0_.usuario_id as usuario2_5_2_, partida1_.id as id4_0_, partida1_.puntuacion as puntuacion4_0_, ranking2_.id as id1_1_, ranking2_.PARTIDA_ID as PARTIDA2_1_1_ from TUSUARIOSPARTIDA partidas0_ inner join TPARTIDA partida1_ on partidas0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID where partidas0_.usuario_id=?
DEBUG-> initializing class SessionFactoryObjectFactory
DEBUG-> registered: b8956787-4d22-49a7-b685-8c2fd0241b76 (unnamed)
INFO-> Not binding factory to JNDI, no JNDI name configured
DEBUG-> instantiated session factory
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
INFO-> Running hbm2ddl schema export
DEBUG-> import file not found: /import.sql
INFO-> exporting generated schema to database
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79DF91EA6BD
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79D6B7A9219
DEBUG-> alter table TRANKING drop constraint FK7AFB114276E97130
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2C5A031C4
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2CA8D67E4
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A76E97130
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A2AB62F50
DEBUG-> drop table TPARTIDA if exists
DEBUG-> drop table TPREGUNTAS if exists
DEBUG-> drop table TPREGUNTAS_TRESPUESTAS if exists
DEBUG-> drop table TRANKING if exists
DEBUG-> drop table TRANKING_TPREGUNTAS if exists
DEBUG-> drop table TRESPUESTAS if exists
DEBUG-> drop table TUSUARIOS if exists
DEBUG-> drop table TUSUARIOSPARTIDA if exists
DEBUG-> create table TPARTIDA (id bigint generated by default as identity (start with 1), puntuacion integer, primary key (id))
DEBUG-> create table TPREGUNTAS (id bigint not null, categoria varchar(255), pregunta varchar(255), primary key (id))
DEBUG-> create table TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id bigint not null, respuestas_id bigint not null, primary key (TPREGUNTAS_id, respuestas_id), unique (respuestas_id))
DEBUG-> create table TRANKING (id bigint not null, PARTIDA_ID bigint, primary key (id))
DEBUG-> create table TRANKING_TPREGUNTAS (TRANKING_id bigint not null, pregunta_id bigint not null, primary key (TRANKING_id, pregunta_id), unique (pregunta_id))
DEBUG-> create table TRESPUESTAS (id bigint not null, correcta bit not null, respuesta varchar(255), primary key (id))
DEBUG-> create table TUSUARIOS (id bigint generated by default as identity (start with 1), contrasenia varchar(255), nombre varchar(255), usuario varchar(255), primary key (id))
DEBUG-> create table TUSUARIOSPARTIDA (partida_id bigint, usuario_id bigint, primary key (partida_id, usuario_id))
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79DF91EA6BD foreign key (respuestas_id) references TRESPUESTAS
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79D6B7A9219 foreign key (TPREGUNTAS_id) references TPREGUNTAS
DEBUG-> alter table TRANKING add constraint FK7AFB114276E97130 foreign key (PARTIDA_ID) references TPARTIDA
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2C5A031C4 foreign key (TRANKING_id) references TRANKING
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2CA8D67E4 foreign key (pregunta_id) references TPREGUNTAS
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A76E97130 foreign key (partida_id) references TPARTIDA
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A2AB62F50 foreign key (usuario_id) references TUSUARIOS
INFO-> schema export complete
DEBUG-> Checking 1 named HQL queries
DEBUG-> Checking named query: Usuario.findAll
DEBUG-> parse() - HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  |  +-[IDENT] Node: 'es'
       |     |  |  |  |  |  |  |  |  |  \-[IDENT] Node: 'uniovi'
       |     |  |  |  |  |  |  |  |  \-[IDENT] Node: 'asw'
       |     |  |  |  |  |  |  |  \-[IDENT] Node: 'trivial'
       |     |  |  |  |  |  |  \-[IDENT] Node: 'db'
       |     |  |  |  |  |  \-[IDENT] Node: 'impl'
       |     |  |  |  |  \-[IDENT] Node: 'local'
       |     |  |  |  \-[IDENT] Node: 'persistencia'
       |     |  |  \-[IDENT] Node: 'model'
       |     |  \-[IDENT] Node: 'Usuario'
       |     \-[ALIAS] Node: 'u'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'u'

DEBUG-> throwQueryException() : no errors
DEBUG-> select << begin [level=1, statement=select]
DEBUG-> FromClause{level=1} :  es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario (u) -> usuario0_
DEBUG-> Resolved :  u -> usuario0_.id
DEBUG-> select : finishing up [level=1, statement=select]
DEBUG-> processQuery() :  ( SELECT ( {select clause} usuario0_.id ) ( FromClause{level=1} TUSUARIOS usuario0_ ) )
DEBUG-> Using FROM fragment [TUSUARIOS usuario0_]
DEBUG-> select >> end [level=1, statement=select]
DEBUG-> --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (TUSUARIOS)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'usuario0_.id as id3_' {alias=u, className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario, tableAlias=usuario0_}
    |  \-[SQL_TOKEN] SqlFragment: 'usuario0_.contrasenia as contrase2_3_, usuario0_.nombre as nombre3_, usuario0_.usuario as usuario3_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[usuario0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'TUSUARIOS usuario0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=TUSUARIOS,tableAlias=usuario0_,origin=null,columns={,className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario}}

DEBUG-> throwQueryException() : no errors
DEBUG-> HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> SQL: select usuario0_.id as id3_, usuario0_.contrasenia as contrase2_3_, usuario0_.nombre as nombre3_, usuario0_.usuario as usuario3_ from TUSUARIOS usuario0_
DEBUG-> throwQueryException() : no errors
DEBUG-> Checking 0 named SQL queries
DEBUG-> opened session at timestamp: 14279937587
DEBUG-> begin
DEBUG-> opening JDBC connection
DEBUG-> current autocommit status: true
DEBUG-> disabling autocommit
DEBUG-> commit
DEBUG-> re-enabling autocommit
DEBUG-> committed JDBC Connection
DEBUG-> aggressively releasing JDBC connection
DEBUG-> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
DEBUG-> about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
DEBUG-> opening JDBC connection
DEBUG-> select usuario0_.id as id3_, usuario0_.contrasenia as contrase2_3_, usuario0_.nombre as nombre3_, usuario0_.usuario as usuario3_ from TUSUARIOS usuario0_
DEBUG-> about to open ResultSet (open ResultSets: 0, globally: 0)
DEBUG-> about to close ResultSet (open ResultSets: 1, globally: 1)
DEBUG-> about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
DEBUG-> aggressively releasing JDBC connection
DEBUG-> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
DEBUG-> initializing non-lazy collections
DEBUG-> aggressively releasing JDBC connection
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@72d9b737
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@72d9b737
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@72d9b737
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@35fff810
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@715418bf
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@6823f89b
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@4b22dfb
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@4b22dfb
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@4b22dfb
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@21a6a416
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@21a6a416
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@21a6a416
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@1ecfb3cf
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@1ecfb3cf
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1ecfb3cf
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@2b8adc9c
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@2b8adc9c
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@2b8adc9c
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@15e38223
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@15e38223
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@15e38223
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@4b6a93
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@4b6a93
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4b6a93
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@1a631be5
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@1a631be5
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1a631be5
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@29adcfe5
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@29adcfe5
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6c8e072a
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6c8e072a
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@2d228b6e
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@2d228b6e
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@58f91cd8
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@58f91cd8
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@61a690c6
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@61a690c6
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@7f984d63
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7f984d63
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@2f5cba1d
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@2f5cba1d
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@2f5cba1d
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@10e783df
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@28d32750
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@28d32750
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@28d32750
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@16edf57c
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@47d2c39e
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@47d2c39e
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@1702f62
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1702f62
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@1c91c50c
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1c91c50c
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@4e2c9273
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@4e2c9273
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@7148242f
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@7148242f
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@160de55a
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@8445e76
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@36624bc6
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@36624bc6
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@36624bc6
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@16f5424
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@16f5424
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@16f5424
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@48e4b9e2
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@4f1b3ab1
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@4f1b3ab1
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@4f1b3ab1
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@dc260f9
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@dc260f9
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@dc260f9
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@51cea8ab
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@1834db23
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1834db23
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@6120d446
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@7b3fe2b3
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@7b3fe2b3
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1f367c41
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@4d7ee347
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@40605bb0
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@40605bb0
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@2869c9fb
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@6a96ba9d
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@3e166961
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@553b3cc4
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@33fb0189
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@6ce60739
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@613626a5
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@6d67eb5b
INFO-> Hibernate Commons Annotations 3.2.0.Final
INFO-> Hibernate 3.6.0.Final
INFO-> hibernate.properties not found
INFO-> Bytecode provider name : javassist
INFO-> using JDK 1.4 java.sql.Timestamp handling
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
INFO-> Hibernate EntityManager 3.6.0.Final
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@72d9b737
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@72d9b737
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@72d9b737
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@35fff810
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@715418bf
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@6823f89b
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@4b22dfb
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@4b22dfb
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@4b22dfb
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@21a6a416
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@21a6a416
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@21a6a416
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@1ecfb3cf
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@1ecfb3cf
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1ecfb3cf
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@2b8adc9c
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@2b8adc9c
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@2b8adc9c
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@15e38223
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@15e38223
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@15e38223
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@4b6a93
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@4b6a93
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@4b6a93
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@1a631be5
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@1a631be5
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1a631be5
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@29adcfe5
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@29adcfe5
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6c8e072a
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6c8e072a
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@2d228b6e
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@2d228b6e
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@58f91cd8
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@58f91cd8
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@61a690c6
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@61a690c6
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@7f984d63
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7f984d63
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@2f5cba1d
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@2f5cba1d
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@2f5cba1d
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@10e783df
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@28d32750
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@28d32750
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@28d32750
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@16edf57c
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@47d2c39e
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@47d2c39e
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@1702f62
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1702f62
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@1c91c50c
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1c91c50c
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@4e2c9273
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@4e2c9273
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@7148242f
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@7148242f
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@160de55a
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@8445e76
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@36624bc6
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@36624bc6
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@36624bc6
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@16f5424
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@16f5424
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@16f5424
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@48e4b9e2
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@4f1b3ab1
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@4f1b3ab1
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@4f1b3ab1
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@dc260f9
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@dc260f9
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@dc260f9
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@51cea8ab
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@1834db23
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1834db23
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@6120d446
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@7b3fe2b3
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@7b3fe2b3
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1f367c41
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@4d7ee347
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@40605bb0
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@40605bb0
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@577b5fef
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@41013bc3
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@480afb70
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@6c59d3fc
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@61506dbf
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@29c79d75
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@36093246
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@14edc148
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
DEBUG-> Look up for persistence unit: trivial4b
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Searching mapped entities in jar/par: file:/C:/Users/Smooth/1/Trivial4b/game/target/classes/
DEBUG-> Filtering: es.uniovi.asw.trivial.db.DBManager
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.LocalHSQLDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.PartidaFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.SimplePersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.UsuarioFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PartidaFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.UsuarioFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.util.Jpa
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.infrastucture.Factories
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.JustLoadHibernate
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.type.UsuarioPartidaKey
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.remote.RemoteMongoDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.LocalDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.RemoteDB
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.DBFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.GrafoFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.TableroFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Grafo
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Trivial
DEBUG-> Filtering: es.uniovi.asw.trivial.main.Main
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaGame
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Action
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Casilla
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAjustes
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.ModeloNoEditable
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$5
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$6
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$7
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$8
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$9
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal
DEBUG-> File Filter matched for META-INF/orm.xml
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Creating Factory: trivial4b
DEBUG-> trying to resolve system-id [file:///C:/Users/Smooth/1/Trivial4b/game/orm_2_0.xsd]
INFO-> Binding Named query: Usuario.findAll => select u from Usuario u
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Respuesta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta on table TRESPUESTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=correcta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property correcta with lazy=false
DEBUG-> building SimpleValue for correcta
DEBUG-> Building property correcta
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=respuesta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property respuesta with lazy=false
DEBUG-> building SimpleValue for respuesta
DEBUG-> Building property respuesta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Pregunta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta on table TPREGUNTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=categoria, insertable=true, updatable=true, unique=false}
DEBUG-> binding property categoria with lazy=false
DEBUG-> building SimpleValue for categoria
DEBUG-> Building property categoria
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property pregunta with lazy=false
DEBUG-> building SimpleValue for pregunta
DEBUG-> Building property pregunta
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='respuestas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Building property respuestas
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Partida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida on table TPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=puntuacion, insertable=true, updatable=true, unique=false}
DEBUG-> binding property puntuacion with lazy=false
DEBUG-> building SimpleValue for puntuacion
DEBUG-> Building property puntuacion
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=ranking, insertable=true, updatable=true, unique=false}
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Usuario
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario on table TUSUARIOS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=contrasenia, insertable=true, updatable=true, unique=false}
DEBUG-> binding property contrasenia with lazy=false
DEBUG-> building SimpleValue for contrasenia
DEBUG-> Building property contrasenia
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=nombre, insertable=true, updatable=true, unique=false}
DEBUG-> binding property nombre with lazy=false
DEBUG-> building SimpleValue for nombre
DEBUG-> Building property nombre
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name UsuariosPartida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida on table TUSUARIOSPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property partida with lazy=false
DEBUG-> building SimpleValue for partida
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Ranking
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking on table TRANKING
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='PARTIDA_ID', referencedColumn='', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='pregunta_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Building property pregunta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for correcta
DEBUG-> Setting SimpleValue typeName for respuesta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for categoria
DEBUG-> Setting SimpleValue typeName for pregunta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for puntuacion
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for contrasenia
DEBUG-> Setting SimpleValue typeName for nombre
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for partida
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta through an association table
DEBUG-> Mapped collection key: TRANKING_id, element: pregunta_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas through an association table
DEBUG-> Mapped collection key: TPREGUNTAS_id, element: respuestas_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.partida
DEBUG-> Mapped collection key: partida_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Building property ranking
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.usuario
DEBUG-> Mapped collection key: usuario_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
INFO-> Hibernate Validator not found: ignoring
DEBUG-> No JNDI name configured for binding Ejb3Configuration
DEBUG-> Preparing to build session factory with filters : {}
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Legacy Validator not present in classpath, ignoring event listener registration
DEBUG-> Search not present in classpath, ignoring event listener registration.
INFO-> Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
INFO-> Using Hibernate built-in connection pool (not for production use!)
INFO-> Hibernate connection pool size: 20
INFO-> autocommit mode: true
INFO-> using driver: org.hsqldb.jdbcDriver at URL: jdbc:hsqldb:hsql://localhost
INFO-> connection properties: {user=sa, autocommit=true, release_mode=auto}
DEBUG-> opening new JDBC connection
DEBUG-> created connection to: jdbc:hsqldb:hsql://localhost, Isolation Level: 2
INFO-> Database ->
       name : HSQL Database Engine
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Using dialect: org.hibernate.dialect.HSQLDialect
INFO-> Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
INFO-> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
INFO-> Automatic flush during beforeCompletion(): disabled
INFO-> Automatic session close at end of transaction: disabled
INFO-> JDBC batch size: 15
INFO-> JDBC batch updates for versioned data: disabled
INFO-> Scrollable result sets: enabled
DEBUG-> Wrap result sets: disabled
INFO-> JDBC3 getGeneratedKeys(): enabled
INFO-> Connection release mode: auto
INFO-> Default batch fetch size: 1
INFO-> Generate SQL with comments: disabled
INFO-> Order SQL updates by primary key: disabled
INFO-> Order SQL inserts for batching: disabled
INFO-> Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
INFO-> Using ASTQueryTranslatorFactory
INFO-> Query language substitutions: {}
INFO-> JPA-QL strict compliance: enabled
INFO-> Second-level cache: enabled
INFO-> Query cache: disabled
INFO-> Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
INFO-> Optimize cache for minimal puts: disabled
INFO-> Structured second-level cache entries: disabled
INFO-> Statistics: disabled
INFO-> Deleted entity synthetic identifier rollback: disabled
INFO-> Default entity-mode: pojo
INFO-> Named query checking : enabled
INFO-> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
INFO-> building session factory
DEBUG-> Statistics initialized [enabled=false]}
DEBUG-> Session factory constructed with filter configurations : {}
DEBUG-> instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:hsqldb:hsql://localhost, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.ejb.discard_pc_on_close=false, hibernate.transaction.flush_before_completion=false, os.name=Windows 7, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_31\lib\resources.jar;C:\Program Files\Java\jre1.8.0_31\lib\rt.jar;C:\Program Files\Java\jre1.8.0_31\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_31\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_31\lib\jce.jar;C:\Program Files\Java\jre1.8.0_31\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_31\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_31\classes, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, java.runtime.version=1.8.0_31-b13, hibernate.connection.autocommit=true, javax.persistence.jdbc.user=sa, user.name=Smooth, hibernate.connection.release_mode=auto, user.language=es, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_31\bin, java.version=1.8.0_31, user.timezone=Europe/Paris, sun.arch.data.model=64, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_31\lib\endorsed, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=52.0, user.country=ES, java.home=C:\Program Files\Java\jre1.8.0_31, java.vm.info=mixed mode, os.version=6.1, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=25.31-b07, javax.persistence.jdbc.url=jdbc:hsqldb:hsql://localhost, user.variant=, sun.awt.enableExtraMouseButtons=true, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=sa, user.script=, user.home=C:\Users\Smooth, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=create, java.library.path=C:\Program Files\Java\jre1.8.0_31\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Java\jdk1.7.0_25\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\AMD\ATI.ACE\Core-Static;C:\apache-maven-3.3.1\bin;C:\Users\Smooth\Desktop\eclipseASW;;., java.vendor.url=http://java.oracle.com/, hibernate.connection.driver_class=org.hsqldb.jdbcDriver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=es.uniovi.asw.trivial.main.Main, java.class.path=C:\Users\Smooth\1\Trivial4b\game\target\classes;C:\Users\Smooth\1\Trivial4b\game\lib\antlr-2.7.6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\commons-collections-3.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\dom4j-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hibernate3.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hsqldb.jar;C:\Users\Smooth\1\Trivial4b\game\lib\javassist-3.12.0.GA.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jbossall-client.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jsp-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl-1.2.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jta-1.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\log4j-1.2.13.jar;C:\Users\Smooth\1\Trivial4b\game\lib\ojdbc6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\servlet-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-api-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-log4j12-1.6.1.jar;C:\Users\Smooth\.m2\repository\org\mongodb\mongo-java-driver\2.13.0\mongo-java-driver-2.13.0.jar;C:\Users\Smooth\.m2\repository\org\jgrapht\jgrapht-core\0.9.0\jgrapht-core-0.9.0.jar;C:\Users\Smooth\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.8, sun.cpu.endian=little, javax.persistence.jdbc.driver=org.hsqldb.jdbcDriver, sun.os.patch.level=Service Pack 1, java.io.tmpdir=C:\Users\Smooth\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, os.arch=amd64, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=C:\Program Files\Java\jre1.8.0_31\lib\ext;C:\Windows\Sun\Java\lib\ext, javax.persistence.jdbc.password=, user.dir=C:\Users\Smooth\1\Trivial4b\game, line.separator=
, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.8}
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG->  Version select: select id from TPREGUNTAS where id =?
DEBUG->  Snapshot select: select pregunta_.id, pregunta_.categoria as categoria1_, pregunta_.pregunta as pregunta1_ from TPREGUNTAS pregunta_ where pregunta_.id=?
DEBUG->  Insert 0: insert into TPREGUNTAS (categoria, pregunta, id) values (?, ?, ?)
DEBUG->  Update 0: update TPREGUNTAS set categoria=?, pregunta=? where id=?
DEBUG->  Delete 0: delete from TPREGUNTAS where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG->  Version select: select partida_id, usuario_id from TUSUARIOSPARTIDA where partida_id =? and usuario_id =?
DEBUG->  Snapshot select: select usuariospa_.partida_id, usuariospa_.usuario_id from TUSUARIOSPARTIDA usuariospa_ where usuariospa_.partida_id=? and usuariospa_.usuario_id=?
DEBUG->  Insert 0: insert into TUSUARIOSPARTIDA (partida_id, usuario_id) values (?, ?)
DEBUG->  Update 0: null
DEBUG->  Delete 0: delete from TUSUARIOSPARTIDA where partida_id=? and usuario_id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG->  Version select: select id from TUSUARIOS where id =?
DEBUG->  Snapshot select: select usuario_.id, usuario_.contrasenia as contrase2_3_, usuario_.nombre as nombre3_, usuario_.usuario as usuario3_ from TUSUARIOS usuario_ where usuario_.id=?
DEBUG->  Insert 0: insert into TUSUARIOS (contrasenia, nombre, usuario, id) values (?, ?, ?, ?)
DEBUG->  Update 0: update TUSUARIOS set contrasenia=?, nombre=?, usuario=? where id=?
DEBUG->  Delete 0: delete from TUSUARIOS where id=?
DEBUG->  Identity insert: insert into TUSUARIOS (id, contrasenia, nombre, usuario) values (default, ?, ?, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG->  Version select: select id from TRANKING where id =?
DEBUG->  Snapshot select: select ranking_.id, ranking_.PARTIDA_ID as PARTIDA2_5_ from TRANKING ranking_ where ranking_.id=?
DEBUG->  Insert 0: insert into TRANKING (PARTIDA_ID, id) values (?, ?)
DEBUG->  Update 0: update TRANKING set PARTIDA_ID=? where id=?
DEBUG->  Delete 0: delete from TRANKING where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG->  Version select: select id from TPARTIDA where id =?
DEBUG->  Snapshot select: select partida_.id, partida_.puntuacion as puntuacion2_ from TPARTIDA partida_ where partida_.id=?
DEBUG->  Insert 0: insert into TPARTIDA (puntuacion, id) values (?, ?)
DEBUG->  Update 0: update TPARTIDA set puntuacion=? where id=?
DEBUG->  Delete 0: delete from TPARTIDA where id=?
DEBUG->  Identity insert: insert into TPARTIDA (id, puntuacion) values (default, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG->  Version select: select id from TRESPUESTAS where id =?
DEBUG->  Snapshot select: select respuesta_.id, respuesta_.correcta as correcta0_, respuesta_.respuesta as respuesta0_ from TRESPUESTAS respuesta_ where respuesta_.id=?
DEBUG->  Insert 0: insert into TRESPUESTAS (correcta, respuesta, id) values (?, ?, ?)
DEBUG->  Update 0: update TRESPUESTAS set correcta=?, respuesta=? where id=?
DEBUG->  Delete 0: delete from TRESPUESTAS where id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set partida_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=? and usuario_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG->  Row insert: insert into TRANKING_TPREGUNTAS (TRANKING_id, pregunta_id) values (?, ?)
DEBUG->  Row update: update TRANKING_TPREGUNTAS set pregunta_id=? where TRANKING_id=? and pregunta_id=?
DEBUG->  Row delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=? and pregunta_id=?
DEBUG->  One-shot delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG->  Row insert: insert into TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id, respuestas_id) values (?, ?)
DEBUG->  Row update: update TPREGUNTAS_TRESPUESTAS set respuestas_id=? where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  Row delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  One-shot delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set usuario_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=? and partida_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [NONE]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [READ]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE_NOWAIT]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [FORCE]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_READ]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_WRITE]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id1_0_, pregunta0_.categoria as categoria1_0_, pregunta0_.pregunta as pregunta1_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [NONE]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [READ]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE_NOWAIT]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [FORCE]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_READ]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_WRITE]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id3_2_, usuario3_.contrasenia as contrase2_3_2_, usuario3_.nombre as nombre3_2_, usuario3_.usuario as usuario3_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [NONE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [READ]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE_NOWAIT]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [FORCE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_READ]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_WRITE]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id3_0_, usuario0_.contrasenia as contrase2_3_0_, usuario0_.nombre as nombre3_0_, usuario0_.usuario as usuario3_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [READ]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE_NOWAIT]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [FORCE]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_READ]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_WRITE]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.PARTIDA_ID=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [NONE]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [READ]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE_NOWAIT]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [FORCE]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_READ]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_WRITE]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_FORCE_INCREMENT]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC_FORCE_INCREMENT]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [NONE]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [READ]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE_NOWAIT]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [FORCE]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_READ]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_WRITE]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id0_0_, respuesta0_.correcta as correcta0_0_, respuesta0_.respuesta as respuesta0_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas: select partidas0_.partida_id as partida1_2_2_, partidas0_.partida_id as partida1_2_, partidas0_.usuario_id as usuario2_2_, partidas0_.partida_id as partida1_4_1_, partidas0_.usuario_id as usuario2_4_1_, usuario1_.id as id3_0_, usuario1_.contrasenia as contrase2_3_0_, usuario1_.nombre as nombre3_0_, usuario1_.usuario as usuario3_0_ from TUSUARIOSPARTIDA partidas0_ inner join TUSUARIOS usuario1_ on partidas0_.usuario_id=usuario1_.id where partidas0_.partida_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta: select pregunta0_.TRANKING_id as TRANKING1_5_1_, pregunta0_.pregunta_id as pregunta2_1_, pregunta1_.id as id1_0_, pregunta1_.categoria as categoria1_0_, pregunta1_.pregunta as pregunta1_0_ from TRANKING_TPREGUNTAS pregunta0_ inner join TPREGUNTAS pregunta1_ on pregunta0_.pregunta_id=pregunta1_.id where pregunta0_.TRANKING_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas: select respuestas0_.TPREGUNTAS_id as TPREGUNTAS1_1_1_, respuestas0_.respuestas_id as respuestas2_1_, respuesta1_.id as id0_0_, respuesta1_.correcta as correcta0_0_, respuesta1_.respuesta as respuesta0_0_ from TPREGUNTAS_TRESPUESTAS respuestas0_ inner join TRESPUESTAS respuesta1_ on respuestas0_.respuestas_id=respuesta1_.id where respuestas0_.TPREGUNTAS_id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas: select partidas0_.usuario_id as usuario2_3_3_, partidas0_.partida_id as partida1_3_, partidas0_.usuario_id as usuario2_3_, partidas0_.partida_id as partida1_4_2_, partidas0_.usuario_id as usuario2_4_2_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_ from TUSUARIOSPARTIDA partidas0_ inner join TPARTIDA partida1_ on partidas0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID where partidas0_.usuario_id=?
DEBUG-> initializing class SessionFactoryObjectFactory
DEBUG-> registered: c4cee004-c744-4ff3-a299-487c5905f059 (unnamed)
INFO-> Not binding factory to JNDI, no JNDI name configured
DEBUG-> instantiated session factory
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
INFO-> Running hbm2ddl schema export
DEBUG-> import file not found: /import.sql
INFO-> exporting generated schema to database
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79DF91EA6BD
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79D6B7A9219
DEBUG-> alter table TRANKING drop constraint FK7AFB114276E97130
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2C5A031C4
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2CA8D67E4
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A76E97130
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A2AB62F50
DEBUG-> drop table TPARTIDA if exists
DEBUG-> drop table TPREGUNTAS if exists
DEBUG-> drop table TPREGUNTAS_TRESPUESTAS if exists
DEBUG-> drop table TRANKING if exists
DEBUG-> drop table TRANKING_TPREGUNTAS if exists
DEBUG-> drop table TRESPUESTAS if exists
DEBUG-> drop table TUSUARIOS if exists
DEBUG-> drop table TUSUARIOSPARTIDA if exists
DEBUG-> create table TPARTIDA (id bigint generated by default as identity (start with 1), puntuacion integer, primary key (id))
DEBUG-> create table TPREGUNTAS (id bigint not null, categoria varchar(255), pregunta varchar(255), primary key (id))
DEBUG-> create table TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id bigint not null, respuestas_id bigint not null, primary key (TPREGUNTAS_id, respuestas_id), unique (respuestas_id))
DEBUG-> create table TRANKING (id bigint not null, PARTIDA_ID bigint, primary key (id))
DEBUG-> create table TRANKING_TPREGUNTAS (TRANKING_id bigint not null, pregunta_id bigint not null, primary key (TRANKING_id, pregunta_id), unique (pregunta_id))
DEBUG-> create table TRESPUESTAS (id bigint not null, correcta bit not null, respuesta varchar(255), primary key (id))
DEBUG-> create table TUSUARIOS (id bigint generated by default as identity (start with 1), contrasenia varchar(255), nombre varchar(255), usuario varchar(255), primary key (id))
DEBUG-> create table TUSUARIOSPARTIDA (partida_id bigint, usuario_id bigint, primary key (partida_id, usuario_id))
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79DF91EA6BD foreign key (respuestas_id) references TRESPUESTAS
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79D6B7A9219 foreign key (TPREGUNTAS_id) references TPREGUNTAS
DEBUG-> alter table TRANKING add constraint FK7AFB114276E97130 foreign key (PARTIDA_ID) references TPARTIDA
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2C5A031C4 foreign key (TRANKING_id) references TRANKING
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2CA8D67E4 foreign key (pregunta_id) references TPREGUNTAS
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A76E97130 foreign key (partida_id) references TPARTIDA
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A2AB62F50 foreign key (usuario_id) references TUSUARIOS
INFO-> schema export complete
DEBUG-> Checking 1 named HQL queries
DEBUG-> Checking named query: Usuario.findAll
DEBUG-> parse() - HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  |  +-[IDENT] Node: 'es'
       |     |  |  |  |  |  |  |  |  |  \-[IDENT] Node: 'uniovi'
       |     |  |  |  |  |  |  |  |  \-[IDENT] Node: 'asw'
       |     |  |  |  |  |  |  |  \-[IDENT] Node: 'trivial'
       |     |  |  |  |  |  |  \-[IDENT] Node: 'db'
       |     |  |  |  |  |  \-[IDENT] Node: 'impl'
       |     |  |  |  |  \-[IDENT] Node: 'local'
       |     |  |  |  \-[IDENT] Node: 'persistencia'
       |     |  |  \-[IDENT] Node: 'model'
       |     |  \-[IDENT] Node: 'Usuario'
       |     \-[ALIAS] Node: 'u'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'u'

DEBUG-> throwQueryException() : no errors
DEBUG-> select << begin [level=1, statement=select]
DEBUG-> FromClause{level=1} :  es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario (u) -> usuario0_
DEBUG-> Resolved :  u -> usuario0_.id
DEBUG-> select : finishing up [level=1, statement=select]
DEBUG-> processQuery() :  ( SELECT ( {select clause} usuario0_.id ) ( FromClause{level=1} TUSUARIOS usuario0_ ) )
DEBUG-> Using FROM fragment [TUSUARIOS usuario0_]
DEBUG-> select >> end [level=1, statement=select]
DEBUG-> --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (TUSUARIOS)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'usuario0_.id as id3_' {alias=u, className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario, tableAlias=usuario0_}
    |  \-[SQL_TOKEN] SqlFragment: 'usuario0_.contrasenia as contrase2_3_, usuario0_.nombre as nombre3_, usuario0_.usuario as usuario3_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[usuario0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'TUSUARIOS usuario0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=TUSUARIOS,tableAlias=usuario0_,origin=null,columns={,className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario}}

DEBUG-> throwQueryException() : no errors
DEBUG-> HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> SQL: select usuario0_.id as id3_, usuario0_.contrasenia as contrase2_3_, usuario0_.nombre as nombre3_, usuario0_.usuario as usuario3_ from TUSUARIOS usuario0_
DEBUG-> throwQueryException() : no errors
DEBUG-> Checking 0 named SQL queries
DEBUG-> opened session at timestamp: 14279937849
DEBUG-> begin
DEBUG-> opening JDBC connection
DEBUG-> current autocommit status: true
DEBUG-> disabling autocommit
DEBUG-> commit
DEBUG-> re-enabling autocommit
DEBUG-> committed JDBC Connection
DEBUG-> aggressively releasing JDBC connection
DEBUG-> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
DEBUG-> about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
DEBUG-> opening JDBC connection
DEBUG-> select usuario0_.id as id3_, usuario0_.contrasenia as contrase2_3_, usuario0_.nombre as nombre3_, usuario0_.usuario as usuario3_ from TUSUARIOS usuario0_
DEBUG-> about to open ResultSet (open ResultSets: 0, globally: 0)
DEBUG-> about to close ResultSet (open ResultSets: 1, globally: 1)
DEBUG-> about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
DEBUG-> aggressively releasing JDBC connection
DEBUG-> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
DEBUG-> initializing non-lazy collections
DEBUG-> aggressively releasing JDBC connection
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@20e6c100
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@20e6c100
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@20e6c100
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@68faf9c7
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@569f8bdf
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@37c64b41
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@59d7a8de
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@59d7a8de
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@59d7a8de
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@574d57fe
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@574d57fe
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@574d57fe
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@a147b45
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@a147b45
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@a147b45
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@2d12b0e7
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@2d12b0e7
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@2d12b0e7
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@79d2a730
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@79d2a730
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@79d2a730
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@74b880d6
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@74b880d6
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@74b880d6
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@77f9292c
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@77f9292c
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@77f9292c
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@43ce5274
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@43ce5274
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@411d0d58
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@411d0d58
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@783663b3
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@783663b3
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@335195f8
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@335195f8
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@7cfddbbc
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@7cfddbbc
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@232a2ce7
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@232a2ce7
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@423f757a
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@423f757a
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@423f757a
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@ff45f99
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@409fbdc5
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@409fbdc5
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@409fbdc5
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@5406bfc0
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@148d7252
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@148d7252
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@58aef399
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@58aef399
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@2a577573
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@2a577573
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@2887a4a
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@2887a4a
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@3e33366e
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@3e33366e
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@6c002bac
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@69fdfba6
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@7a849e23
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@7a849e23
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@7a849e23
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@2c0d903b
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@2c0d903b
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@2c0d903b
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@3a5ffd01
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@225753b
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@225753b
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@225753b
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@51b37028
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@51b37028
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@51b37028
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@493d93d9
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@6051a0d9
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6051a0d9
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@23219243
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@129e96c3
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@129e96c3
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@32da0f8f
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@60598b35
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@2af2a4ce
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2af2a4ce
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@50e338a9
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7a7f780a
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@637f01d7
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@4df39a5f
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@41cd538
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@5a24299
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1e488a43
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@4f38dab7
INFO-> Hibernate Commons Annotations 3.2.0.Final
INFO-> Hibernate 3.6.0.Final
INFO-> hibernate.properties not found
INFO-> Bytecode provider name : javassist
INFO-> using JDK 1.4 java.sql.Timestamp handling
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
INFO-> Hibernate EntityManager 3.6.0.Final
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@20e6c100
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@20e6c100
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@20e6c100
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@68faf9c7
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@569f8bdf
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@37c64b41
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@59d7a8de
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@59d7a8de
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@59d7a8de
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@574d57fe
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@574d57fe
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@574d57fe
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@a147b45
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@a147b45
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@a147b45
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@2d12b0e7
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@2d12b0e7
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@2d12b0e7
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@79d2a730
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@79d2a730
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@79d2a730
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@74b880d6
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@74b880d6
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@74b880d6
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@77f9292c
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@77f9292c
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@77f9292c
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@43ce5274
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@43ce5274
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@411d0d58
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@411d0d58
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@783663b3
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@783663b3
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@335195f8
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@335195f8
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@7cfddbbc
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@7cfddbbc
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@232a2ce7
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@232a2ce7
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@423f757a
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@423f757a
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@423f757a
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@ff45f99
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@409fbdc5
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@409fbdc5
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@409fbdc5
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@5406bfc0
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@148d7252
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@148d7252
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@58aef399
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@58aef399
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@2a577573
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@2a577573
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@2887a4a
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@2887a4a
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@3e33366e
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@3e33366e
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@6c002bac
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@69fdfba6
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@7a849e23
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@7a849e23
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@7a849e23
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@2c0d903b
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@2c0d903b
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@2c0d903b
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@3a5ffd01
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@225753b
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@225753b
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@225753b
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@51b37028
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@51b37028
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@51b37028
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@493d93d9
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@6051a0d9
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6051a0d9
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@23219243
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@129e96c3
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@129e96c3
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@32da0f8f
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@60598b35
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@2af2a4ce
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2af2a4ce
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@56a95059
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4078f204
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@19d8937
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@32d98d13
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@2e6e3889
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@29811792
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@4438e7a4
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@3a775b25
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
DEBUG-> Look up for persistence unit: trivial4b
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Searching mapped entities in jar/par: file:/C:/Users/Smooth/1/Trivial4b/game/target/classes/
DEBUG-> Filtering: es.uniovi.asw.trivial.db.DBManager
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.LocalHSQLDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.PartidaFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.SimplePersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.UsuarioFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PartidaFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.UsuarioFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.util.Jpa
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.infrastucture.Factories
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.JustLoadHibernate
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.type.UsuarioPartidaKey
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.remote.RemoteMongoDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.LocalDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.RemoteDB
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.DBFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.GrafoFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.TableroFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Grafo
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Trivial
DEBUG-> Filtering: es.uniovi.asw.trivial.main.Main
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaGame
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Action
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Casilla
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAjustes
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.ModeloNoEditable
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$5
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$6
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$7
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$8
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$9
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal
DEBUG-> File Filter matched for META-INF/orm.xml
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Creating Factory: trivial4b
DEBUG-> trying to resolve system-id [file:///C:/Users/Smooth/1/Trivial4b/game/orm_2_0.xsd]
INFO-> Binding Named query: Usuario.findAll => select u from Usuario u
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Ranking
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking on table TRANKING
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='PARTIDA_ID', referencedColumn='', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='pregunta_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Building property pregunta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Usuario
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario on table TUSUARIOS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=contrasenia, insertable=true, updatable=true, unique=false}
DEBUG-> binding property contrasenia with lazy=false
DEBUG-> building SimpleValue for contrasenia
DEBUG-> Building property contrasenia
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=nombre, insertable=true, updatable=true, unique=false}
DEBUG-> binding property nombre with lazy=false
DEBUG-> building SimpleValue for nombre
DEBUG-> Building property nombre
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Respuesta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta on table TRESPUESTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=correcta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property correcta with lazy=false
DEBUG-> building SimpleValue for correcta
DEBUG-> Building property correcta
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=respuesta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property respuesta with lazy=false
DEBUG-> building SimpleValue for respuesta
DEBUG-> Building property respuesta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Pregunta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta on table TPREGUNTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=categoria, insertable=true, updatable=true, unique=false}
DEBUG-> binding property categoria with lazy=false
DEBUG-> building SimpleValue for categoria
DEBUG-> Building property categoria
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property pregunta with lazy=false
DEBUG-> building SimpleValue for pregunta
DEBUG-> Building property pregunta
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='respuestas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Building property respuestas
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name UsuariosPartida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida on table TUSUARIOSPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property partida with lazy=false
DEBUG-> building SimpleValue for partida
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Partida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida on table TPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=puntuacion, insertable=true, updatable=true, unique=false}
DEBUG-> binding property puntuacion with lazy=false
DEBUG-> building SimpleValue for puntuacion
DEBUG-> Building property puntuacion
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=ranking, insertable=true, updatable=true, unique=false}
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for contrasenia
DEBUG-> Setting SimpleValue typeName for nombre
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for correcta
DEBUG-> Setting SimpleValue typeName for respuesta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for categoria
DEBUG-> Setting SimpleValue typeName for pregunta
DEBUG-> Setting SimpleValue typeName for partida
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for puntuacion
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas through an association table
DEBUG-> Mapped collection key: TPREGUNTAS_id, element: respuestas_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta through an association table
DEBUG-> Mapped collection key: TRANKING_id, element: pregunta_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.usuario
DEBUG-> Mapped collection key: usuario_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.partida
DEBUG-> Mapped collection key: partida_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Building property ranking
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
INFO-> Hibernate Validator not found: ignoring
DEBUG-> No JNDI name configured for binding Ejb3Configuration
DEBUG-> Preparing to build session factory with filters : {}
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Legacy Validator not present in classpath, ignoring event listener registration
DEBUG-> Search not present in classpath, ignoring event listener registration.
INFO-> Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
INFO-> Using Hibernate built-in connection pool (not for production use!)
INFO-> Hibernate connection pool size: 20
INFO-> autocommit mode: true
INFO-> using driver: org.hsqldb.jdbcDriver at URL: jdbc:hsqldb:hsql://localhost
INFO-> connection properties: {user=sa, autocommit=true, release_mode=auto}
DEBUG-> opening new JDBC connection
DEBUG-> created connection to: jdbc:hsqldb:hsql://localhost, Isolation Level: 2
INFO-> Database ->
       name : HSQL Database Engine
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Using dialect: org.hibernate.dialect.HSQLDialect
INFO-> Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
INFO-> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
INFO-> Automatic flush during beforeCompletion(): disabled
INFO-> Automatic session close at end of transaction: disabled
INFO-> JDBC batch size: 15
INFO-> JDBC batch updates for versioned data: disabled
INFO-> Scrollable result sets: enabled
DEBUG-> Wrap result sets: disabled
INFO-> JDBC3 getGeneratedKeys(): enabled
INFO-> Connection release mode: auto
INFO-> Default batch fetch size: 1
INFO-> Generate SQL with comments: disabled
INFO-> Order SQL updates by primary key: disabled
INFO-> Order SQL inserts for batching: disabled
INFO-> Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
INFO-> Using ASTQueryTranslatorFactory
INFO-> Query language substitutions: {}
INFO-> JPA-QL strict compliance: enabled
INFO-> Second-level cache: enabled
INFO-> Query cache: disabled
INFO-> Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
INFO-> Optimize cache for minimal puts: disabled
INFO-> Structured second-level cache entries: disabled
INFO-> Statistics: disabled
INFO-> Deleted entity synthetic identifier rollback: disabled
INFO-> Default entity-mode: pojo
INFO-> Named query checking : enabled
INFO-> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
INFO-> building session factory
DEBUG-> Statistics initialized [enabled=false]}
DEBUG-> Session factory constructed with filter configurations : {}
DEBUG-> instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:hsqldb:hsql://localhost, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.ejb.discard_pc_on_close=false, hibernate.transaction.flush_before_completion=false, os.name=Windows 7, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_31\lib\resources.jar;C:\Program Files\Java\jre1.8.0_31\lib\rt.jar;C:\Program Files\Java\jre1.8.0_31\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_31\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_31\lib\jce.jar;C:\Program Files\Java\jre1.8.0_31\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_31\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_31\classes, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, java.runtime.version=1.8.0_31-b13, hibernate.connection.autocommit=true, javax.persistence.jdbc.user=sa, user.name=Smooth, hibernate.connection.release_mode=auto, user.language=es, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_31\bin, java.version=1.8.0_31, user.timezone=Europe/Paris, sun.arch.data.model=64, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_31\lib\endorsed, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=52.0, user.country=ES, java.home=C:\Program Files\Java\jre1.8.0_31, java.vm.info=mixed mode, os.version=6.1, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=25.31-b07, javax.persistence.jdbc.url=jdbc:hsqldb:hsql://localhost, user.variant=, sun.awt.enableExtraMouseButtons=true, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=sa, user.script=, user.home=C:\Users\Smooth, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=create, java.library.path=C:\Program Files\Java\jre1.8.0_31\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Java\jdk1.7.0_25\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\AMD\ATI.ACE\Core-Static;C:\apache-maven-3.3.1\bin;C:\Users\Smooth\Desktop\eclipseASW;;., java.vendor.url=http://java.oracle.com/, hibernate.connection.driver_class=org.hsqldb.jdbcDriver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=es.uniovi.asw.trivial.main.Main, java.class.path=C:\Users\Smooth\1\Trivial4b\game\target\classes;C:\Users\Smooth\1\Trivial4b\game\lib\antlr-2.7.6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\commons-collections-3.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\dom4j-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hibernate3.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hsqldb.jar;C:\Users\Smooth\1\Trivial4b\game\lib\javassist-3.12.0.GA.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jbossall-client.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jsp-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl-1.2.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jta-1.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\log4j-1.2.13.jar;C:\Users\Smooth\1\Trivial4b\game\lib\ojdbc6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\servlet-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-api-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-log4j12-1.6.1.jar;C:\Users\Smooth\.m2\repository\org\mongodb\mongo-java-driver\2.13.0\mongo-java-driver-2.13.0.jar;C:\Users\Smooth\.m2\repository\org\jgrapht\jgrapht-core\0.9.0\jgrapht-core-0.9.0.jar;C:\Users\Smooth\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.8, sun.cpu.endian=little, javax.persistence.jdbc.driver=org.hsqldb.jdbcDriver, sun.os.patch.level=Service Pack 1, java.io.tmpdir=C:\Users\Smooth\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, os.arch=amd64, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=C:\Program Files\Java\jre1.8.0_31\lib\ext;C:\Windows\Sun\Java\lib\ext, javax.persistence.jdbc.password=, user.dir=C:\Users\Smooth\1\Trivial4b\game, line.separator=
, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.8}
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG->  Version select: select id from TPREGUNTAS where id =?
DEBUG->  Snapshot select: select pregunta_.id, pregunta_.categoria as categoria3_, pregunta_.pregunta as pregunta3_ from TPREGUNTAS pregunta_ where pregunta_.id=?
DEBUG->  Insert 0: insert into TPREGUNTAS (categoria, pregunta, id) values (?, ?, ?)
DEBUG->  Update 0: update TPREGUNTAS set categoria=?, pregunta=? where id=?
DEBUG->  Delete 0: delete from TPREGUNTAS where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG->  Version select: select partida_id, usuario_id from TUSUARIOSPARTIDA where partida_id =? and usuario_id =?
DEBUG->  Snapshot select: select usuariospa_.partida_id, usuariospa_.usuario_id from TUSUARIOSPARTIDA usuariospa_ where usuariospa_.partida_id=? and usuariospa_.usuario_id=?
DEBUG->  Insert 0: insert into TUSUARIOSPARTIDA (partida_id, usuario_id) values (?, ?)
DEBUG->  Update 0: null
DEBUG->  Delete 0: delete from TUSUARIOSPARTIDA where partida_id=? and usuario_id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG->  Version select: select id from TRANKING where id =?
DEBUG->  Snapshot select: select ranking_.id, ranking_.PARTIDA_ID as PARTIDA2_0_ from TRANKING ranking_ where ranking_.id=?
DEBUG->  Insert 0: insert into TRANKING (PARTIDA_ID, id) values (?, ?)
DEBUG->  Update 0: update TRANKING set PARTIDA_ID=? where id=?
DEBUG->  Delete 0: delete from TRANKING where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG->  Version select: select id from TUSUARIOS where id =?
DEBUG->  Snapshot select: select usuario_.id, usuario_.contrasenia as contrase2_1_, usuario_.nombre as nombre1_, usuario_.usuario as usuario1_ from TUSUARIOS usuario_ where usuario_.id=?
DEBUG->  Insert 0: insert into TUSUARIOS (contrasenia, nombre, usuario, id) values (?, ?, ?, ?)
DEBUG->  Update 0: update TUSUARIOS set contrasenia=?, nombre=?, usuario=? where id=?
DEBUG->  Delete 0: delete from TUSUARIOS where id=?
DEBUG->  Identity insert: insert into TUSUARIOS (id, contrasenia, nombre, usuario) values (default, ?, ?, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG->  Version select: select id from TPARTIDA where id =?
DEBUG->  Snapshot select: select partida_.id, partida_.puntuacion as puntuacion5_ from TPARTIDA partida_ where partida_.id=?
DEBUG->  Insert 0: insert into TPARTIDA (puntuacion, id) values (?, ?)
DEBUG->  Update 0: update TPARTIDA set puntuacion=? where id=?
DEBUG->  Delete 0: delete from TPARTIDA where id=?
DEBUG->  Identity insert: insert into TPARTIDA (id, puntuacion) values (default, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG->  Version select: select id from TRESPUESTAS where id =?
DEBUG->  Snapshot select: select respuesta_.id, respuesta_.correcta as correcta2_, respuesta_.respuesta as respuesta2_ from TRESPUESTAS respuesta_ where respuesta_.id=?
DEBUG->  Insert 0: insert into TRESPUESTAS (correcta, respuesta, id) values (?, ?, ?)
DEBUG->  Update 0: update TRESPUESTAS set correcta=?, respuesta=? where id=?
DEBUG->  Delete 0: delete from TRESPUESTAS where id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set partida_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=? and usuario_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG->  Row insert: insert into TRANKING_TPREGUNTAS (TRANKING_id, pregunta_id) values (?, ?)
DEBUG->  Row update: update TRANKING_TPREGUNTAS set pregunta_id=? where TRANKING_id=? and pregunta_id=?
DEBUG->  Row delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=? and pregunta_id=?
DEBUG->  One-shot delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG->  Row insert: insert into TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id, respuestas_id) values (?, ?)
DEBUG->  Row update: update TPREGUNTAS_TRESPUESTAS set respuestas_id=? where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  Row delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  One-shot delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set usuario_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=? and partida_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [NONE]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [READ]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE_NOWAIT]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [FORCE]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_READ]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_WRITE]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id3_0_, pregunta0_.categoria as categoria3_0_, pregunta0_.pregunta as pregunta3_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [NONE]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_, ranking2_.id as id0_1_, ranking2_.PARTIDA_ID as PARTIDA2_0_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [READ]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_, ranking2_.id as id0_1_, ranking2_.PARTIDA_ID as PARTIDA2_0_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE_NOWAIT]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [FORCE]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_READ]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_WRITE]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_, ranking2_.id as id0_1_, ranking2_.PARTIDA_ID as PARTIDA2_0_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_4_3_, usuariospa0_.usuario_id as usuario2_4_3_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_, ranking2_.id as id0_1_, ranking2_.PARTIDA_ID as PARTIDA2_0_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_4_0_, usuariospa0_.usuario_id as usuario2_4_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id0_1_, ranking0_.PARTIDA_ID as PARTIDA2_0_1_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [READ]: select ranking0_.id as id0_1_, ranking0_.PARTIDA_ID as PARTIDA2_0_1_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE]: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE_NOWAIT]: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [FORCE]: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_READ]: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_WRITE]: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC]: select ranking0_.id as id0_1_, ranking0_.PARTIDA_ID as PARTIDA2_0_1_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id0_1_, ranking0_.PARTIDA_ID as PARTIDA2_0_1_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id0_0_, ranking0_.PARTIDA_ID as PARTIDA2_0_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id0_1_, ranking0_.PARTIDA_ID as PARTIDA2_0_1_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.PARTIDA_ID=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [NONE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [READ]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE_NOWAIT]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [FORCE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_READ]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_WRITE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [NONE]: select partida0_.id as id5_1_, partida0_.puntuacion as puntuacion5_1_, ranking1_.id as id0_0_, ranking1_.PARTIDA_ID as PARTIDA2_0_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [READ]: select partida0_.id as id5_1_, partida0_.puntuacion as puntuacion5_1_, ranking1_.id as id0_0_, ranking1_.PARTIDA_ID as PARTIDA2_0_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE]: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE_NOWAIT]: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [FORCE]: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_READ]: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_WRITE]: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_FORCE_INCREMENT]: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC]: select partida0_.id as id5_1_, partida0_.puntuacion as puntuacion5_1_, ranking1_.id as id0_0_, ranking1_.PARTIDA_ID as PARTIDA2_0_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC_FORCE_INCREMENT]: select partida0_.id as id5_1_, partida0_.puntuacion as puntuacion5_1_, ranking1_.id as id0_0_, ranking1_.PARTIDA_ID as PARTIDA2_0_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id5_0_, partida0_.puntuacion as puntuacion5_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [NONE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [READ]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE_NOWAIT]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [FORCE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_READ]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_WRITE]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id2_0_, respuesta0_.correcta as correcta2_0_, respuesta0_.respuesta as respuesta2_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas: select partidas0_.partida_id as partida1_5_2_, partidas0_.partida_id as partida1_2_, partidas0_.usuario_id as usuario2_2_, partidas0_.partida_id as partida1_4_1_, partidas0_.usuario_id as usuario2_4_1_, usuario1_.id as id1_0_, usuario1_.contrasenia as contrase2_1_0_, usuario1_.nombre as nombre1_0_, usuario1_.usuario as usuario1_0_ from TUSUARIOSPARTIDA partidas0_ inner join TUSUARIOS usuario1_ on partidas0_.usuario_id=usuario1_.id where partidas0_.partida_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta: select pregunta0_.TRANKING_id as TRANKING1_0_1_, pregunta0_.pregunta_id as pregunta2_1_, pregunta1_.id as id3_0_, pregunta1_.categoria as categoria3_0_, pregunta1_.pregunta as pregunta3_0_ from TRANKING_TPREGUNTAS pregunta0_ inner join TPREGUNTAS pregunta1_ on pregunta0_.pregunta_id=pregunta1_.id where pregunta0_.TRANKING_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas: select respuestas0_.TPREGUNTAS_id as TPREGUNTAS1_3_1_, respuestas0_.respuestas_id as respuestas2_1_, respuesta1_.id as id2_0_, respuesta1_.correcta as correcta2_0_, respuesta1_.respuesta as respuesta2_0_ from TPREGUNTAS_TRESPUESTAS respuestas0_ inner join TRESPUESTAS respuesta1_ on respuestas0_.respuestas_id=respuesta1_.id where respuestas0_.TPREGUNTAS_id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas: select partidas0_.usuario_id as usuario2_1_3_, partidas0_.partida_id as partida1_3_, partidas0_.usuario_id as usuario2_3_, partidas0_.partida_id as partida1_4_2_, partidas0_.usuario_id as usuario2_4_2_, partida1_.id as id5_0_, partida1_.puntuacion as puntuacion5_0_, ranking2_.id as id0_1_, ranking2_.PARTIDA_ID as PARTIDA2_0_1_ from TUSUARIOSPARTIDA partidas0_ inner join TPARTIDA partida1_ on partidas0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID where partidas0_.usuario_id=?
DEBUG-> initializing class SessionFactoryObjectFactory
DEBUG-> registered: b139f71f-beab-4704-9f63-64d231358424 (unnamed)
INFO-> Not binding factory to JNDI, no JNDI name configured
DEBUG-> instantiated session factory
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
INFO-> Running hbm2ddl schema export
DEBUG-> import file not found: /import.sql
INFO-> exporting generated schema to database
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79DF91EA6BD
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79D6B7A9219
DEBUG-> alter table TRANKING drop constraint FK7AFB114276E97130
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2C5A031C4
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2CA8D67E4
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A76E97130
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A2AB62F50
DEBUG-> drop table TPARTIDA if exists
DEBUG-> drop table TPREGUNTAS if exists
DEBUG-> drop table TPREGUNTAS_TRESPUESTAS if exists
DEBUG-> drop table TRANKING if exists
DEBUG-> drop table TRANKING_TPREGUNTAS if exists
DEBUG-> drop table TRESPUESTAS if exists
DEBUG-> drop table TUSUARIOS if exists
DEBUG-> drop table TUSUARIOSPARTIDA if exists
DEBUG-> create table TPARTIDA (id bigint generated by default as identity (start with 1), puntuacion integer, primary key (id))
DEBUG-> create table TPREGUNTAS (id bigint not null, categoria varchar(255), pregunta varchar(255), primary key (id))
DEBUG-> create table TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id bigint not null, respuestas_id bigint not null, primary key (TPREGUNTAS_id, respuestas_id), unique (respuestas_id))
DEBUG-> create table TRANKING (id bigint not null, PARTIDA_ID bigint, primary key (id))
DEBUG-> create table TRANKING_TPREGUNTAS (TRANKING_id bigint not null, pregunta_id bigint not null, primary key (TRANKING_id, pregunta_id), unique (pregunta_id))
DEBUG-> create table TRESPUESTAS (id bigint not null, correcta bit not null, respuesta varchar(255), primary key (id))
DEBUG-> create table TUSUARIOS (id bigint generated by default as identity (start with 1), contrasenia varchar(255), nombre varchar(255), usuario varchar(255), primary key (id))
DEBUG-> create table TUSUARIOSPARTIDA (partida_id bigint, usuario_id bigint, primary key (partida_id, usuario_id))
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79DF91EA6BD foreign key (respuestas_id) references TRESPUESTAS
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79D6B7A9219 foreign key (TPREGUNTAS_id) references TPREGUNTAS
DEBUG-> alter table TRANKING add constraint FK7AFB114276E97130 foreign key (PARTIDA_ID) references TPARTIDA
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2C5A031C4 foreign key (TRANKING_id) references TRANKING
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2CA8D67E4 foreign key (pregunta_id) references TPREGUNTAS
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A76E97130 foreign key (partida_id) references TPARTIDA
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A2AB62F50 foreign key (usuario_id) references TUSUARIOS
INFO-> schema export complete
DEBUG-> Checking 1 named HQL queries
DEBUG-> Checking named query: Usuario.findAll
DEBUG-> parse() - HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  |  +-[IDENT] Node: 'es'
       |     |  |  |  |  |  |  |  |  |  \-[IDENT] Node: 'uniovi'
       |     |  |  |  |  |  |  |  |  \-[IDENT] Node: 'asw'
       |     |  |  |  |  |  |  |  \-[IDENT] Node: 'trivial'
       |     |  |  |  |  |  |  \-[IDENT] Node: 'db'
       |     |  |  |  |  |  \-[IDENT] Node: 'impl'
       |     |  |  |  |  \-[IDENT] Node: 'local'
       |     |  |  |  \-[IDENT] Node: 'persistencia'
       |     |  |  \-[IDENT] Node: 'model'
       |     |  \-[IDENT] Node: 'Usuario'
       |     \-[ALIAS] Node: 'u'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'u'

DEBUG-> throwQueryException() : no errors
DEBUG-> select << begin [level=1, statement=select]
DEBUG-> FromClause{level=1} :  es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario (u) -> usuario0_
DEBUG-> Resolved :  u -> usuario0_.id
DEBUG-> select : finishing up [level=1, statement=select]
DEBUG-> processQuery() :  ( SELECT ( {select clause} usuario0_.id ) ( FromClause{level=1} TUSUARIOS usuario0_ ) )
DEBUG-> Using FROM fragment [TUSUARIOS usuario0_]
DEBUG-> select >> end [level=1, statement=select]
DEBUG-> --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (TUSUARIOS)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'usuario0_.id as id1_' {alias=u, className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario, tableAlias=usuario0_}
    |  \-[SQL_TOKEN] SqlFragment: 'usuario0_.contrasenia as contrase2_1_, usuario0_.nombre as nombre1_, usuario0_.usuario as usuario1_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[usuario0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'TUSUARIOS usuario0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=TUSUARIOS,tableAlias=usuario0_,origin=null,columns={,className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario}}

DEBUG-> throwQueryException() : no errors
DEBUG-> HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> SQL: select usuario0_.id as id1_, usuario0_.contrasenia as contrase2_1_, usuario0_.nombre as nombre1_, usuario0_.usuario as usuario1_ from TUSUARIOS usuario0_
DEBUG-> throwQueryException() : no errors
DEBUG-> Checking 0 named SQL queries
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@18440c42
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@18440c42
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@18440c42
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6a0514c0
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@15e80634
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@9a310f
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@35b872ee
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@35b872ee
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@35b872ee
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@408ec7f1
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@408ec7f1
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@408ec7f1
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@2dff392c
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@2dff392c
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2dff392c
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@782e8465
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@782e8465
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@782e8465
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@427b4b94
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@427b4b94
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@427b4b94
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@557c5a1f
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@557c5a1f
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@557c5a1f
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a345bac
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a345bac
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a345bac
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@5f39393a
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@5f39393a
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@50b891e0
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@50b891e0
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@12df38cb
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@12df38cb
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@482734d8
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@482734d8
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@4672abe8
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@4672abe8
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@7f6ba76a
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7f6ba76a
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@221fe0c7
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@221fe0c7
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@221fe0c7
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@404fe14f
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@74f580fc
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@74f580fc
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@74f580fc
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@59b0ef87
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@5f79a6d6
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5f79a6d6
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@13d11301
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@13d11301
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@113ed8e4
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@113ed8e4
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@796155b3
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@796155b3
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@5c73d227
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@5c73d227
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@7fcd200a
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@647f9c
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@2bb02dd7
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@2bb02dd7
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@2bb02dd7
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@15e494d8
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@15e494d8
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@15e494d8
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@516601ed
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@75ddd7e9
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@75ddd7e9
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@75ddd7e9
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3802729b
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3802729b
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3802729b
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@2354ec92
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@75931e85
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@75931e85
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@719fa8fd
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@267bf1f8
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@267bf1f8
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@43603518
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@65f07f09
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@69b97462
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@69b97462
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1fc93234
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@466e7d3d
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@55db7d3f
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@624161a3
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@344fa74d
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1fdb36c
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@f4104e9
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@666420db
INFO-> Hibernate Commons Annotations 3.2.0.Final
INFO-> Hibernate 3.6.0.Final
INFO-> hibernate.properties not found
INFO-> Bytecode provider name : javassist
INFO-> using JDK 1.4 java.sql.Timestamp handling
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
INFO-> Hibernate EntityManager 3.6.0.Final
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@18440c42
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@18440c42
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@18440c42
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6a0514c0
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@15e80634
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@9a310f
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@35b872ee
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@35b872ee
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@35b872ee
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@408ec7f1
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@408ec7f1
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@408ec7f1
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@2dff392c
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@2dff392c
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2dff392c
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@782e8465
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@782e8465
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@782e8465
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@427b4b94
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@427b4b94
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@427b4b94
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@557c5a1f
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@557c5a1f
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@557c5a1f
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a345bac
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@a345bac
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@a345bac
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@5f39393a
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@5f39393a
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@50b891e0
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@50b891e0
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@12df38cb
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@12df38cb
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@482734d8
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@482734d8
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@4672abe8
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@4672abe8
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@7f6ba76a
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@7f6ba76a
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@221fe0c7
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@221fe0c7
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@221fe0c7
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@404fe14f
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@74f580fc
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@74f580fc
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@74f580fc
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@59b0ef87
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@5f79a6d6
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@5f79a6d6
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@13d11301
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@13d11301
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@113ed8e4
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@113ed8e4
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@796155b3
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@796155b3
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@5c73d227
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@5c73d227
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@7fcd200a
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@647f9c
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@2bb02dd7
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@2bb02dd7
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@2bb02dd7
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@15e494d8
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@15e494d8
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@15e494d8
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@516601ed
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@75ddd7e9
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@75ddd7e9
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@75ddd7e9
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3802729b
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3802729b
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3802729b
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@2354ec92
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@75931e85
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@75931e85
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@719fa8fd
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@267bf1f8
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@267bf1f8
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@43603518
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@65f07f09
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@69b97462
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@69b97462
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@46642797
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@13c0f79
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@2bc0b06e
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@230b2729
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@44b4f440
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@25127c68
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@bffeb64
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@7137b75d
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
DEBUG-> Look up for persistence unit: trivial4b
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Searching mapped entities in jar/par: file:/C:/Users/Smooth/1/Trivial4b/game/target/classes/
DEBUG-> Filtering: es.uniovi.asw.trivial.db.DBManager
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.LocalHSQLDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.PartidaFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.SimplePersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.UsuarioFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PartidaFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.UsuarioFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.util.Jpa
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.infrastucture.Factories
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.JustLoadHibernate
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.type.UsuarioPartidaKey
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.remote.RemoteMongoDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.LocalDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.RemoteDB
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.DBFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.GrafoFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.TableroFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Grafo
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Trivial
DEBUG-> Filtering: es.uniovi.asw.trivial.main.Main
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaGame
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Action
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Casilla
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAjustes
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.ModeloNoEditable
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$5
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$6
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$7
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$8
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$9
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal
DEBUG-> File Filter matched for META-INF/orm.xml
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Creating Factory: trivial4b
DEBUG-> trying to resolve system-id [file:///C:/Users/Smooth/1/Trivial4b/game/orm_2_0.xsd]
INFO-> Binding Named query: Usuario.findAll => select u from Usuario u
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Usuario
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario on table TUSUARIOS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=contrasenia, insertable=true, updatable=true, unique=false}
DEBUG-> binding property contrasenia with lazy=false
DEBUG-> building SimpleValue for contrasenia
DEBUG-> Building property contrasenia
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=nombre, insertable=true, updatable=true, unique=false}
DEBUG-> binding property nombre with lazy=false
DEBUG-> building SimpleValue for nombre
DEBUG-> Building property nombre
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name UsuariosPartida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida on table TUSUARIOSPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property partida with lazy=false
DEBUG-> building SimpleValue for partida
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Ranking
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking on table TRANKING
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='PARTIDA_ID', referencedColumn='', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='pregunta_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Building property pregunta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Partida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida on table TPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=puntuacion, insertable=true, updatable=true, unique=false}
DEBUG-> binding property puntuacion with lazy=false
DEBUG-> building SimpleValue for puntuacion
DEBUG-> Building property puntuacion
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=ranking, insertable=true, updatable=true, unique=false}
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Respuesta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta on table TRESPUESTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=correcta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property correcta with lazy=false
DEBUG-> building SimpleValue for correcta
DEBUG-> Building property correcta
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=respuesta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property respuesta with lazy=false
DEBUG-> building SimpleValue for respuesta
DEBUG-> Building property respuesta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Pregunta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta on table TPREGUNTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=categoria, insertable=true, updatable=true, unique=false}
DEBUG-> binding property categoria with lazy=false
DEBUG-> building SimpleValue for categoria
DEBUG-> Building property categoria
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property pregunta with lazy=false
DEBUG-> building SimpleValue for pregunta
DEBUG-> Building property pregunta
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='respuestas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Building property respuestas
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for contrasenia
DEBUG-> Setting SimpleValue typeName for nombre
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for partida
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for puntuacion
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for correcta
DEBUG-> Setting SimpleValue typeName for respuesta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for categoria
DEBUG-> Setting SimpleValue typeName for pregunta
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas through an association table
DEBUG-> Mapped collection key: TPREGUNTAS_id, element: respuestas_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta through an association table
DEBUG-> Mapped collection key: TRANKING_id, element: pregunta_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.usuario
DEBUG-> Mapped collection key: usuario_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.partida
DEBUG-> Mapped collection key: partida_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Building property ranking
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
INFO-> Hibernate Validator not found: ignoring
DEBUG-> No JNDI name configured for binding Ejb3Configuration
DEBUG-> Preparing to build session factory with filters : {}
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Legacy Validator not present in classpath, ignoring event listener registration
DEBUG-> Search not present in classpath, ignoring event listener registration.
INFO-> Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
INFO-> Using Hibernate built-in connection pool (not for production use!)
INFO-> Hibernate connection pool size: 20
INFO-> autocommit mode: true
INFO-> using driver: org.hsqldb.jdbcDriver at URL: jdbc:hsqldb:hsql://localhost
INFO-> connection properties: {user=sa, autocommit=true, release_mode=auto}
DEBUG-> opening new JDBC connection
DEBUG-> created connection to: jdbc:hsqldb:hsql://localhost, Isolation Level: 2
INFO-> Database ->
       name : HSQL Database Engine
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Using dialect: org.hibernate.dialect.HSQLDialect
INFO-> Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
INFO-> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
INFO-> Automatic flush during beforeCompletion(): disabled
INFO-> Automatic session close at end of transaction: disabled
INFO-> JDBC batch size: 15
INFO-> JDBC batch updates for versioned data: disabled
INFO-> Scrollable result sets: enabled
DEBUG-> Wrap result sets: disabled
INFO-> JDBC3 getGeneratedKeys(): enabled
INFO-> Connection release mode: auto
INFO-> Default batch fetch size: 1
INFO-> Generate SQL with comments: disabled
INFO-> Order SQL updates by primary key: disabled
INFO-> Order SQL inserts for batching: disabled
INFO-> Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
INFO-> Using ASTQueryTranslatorFactory
INFO-> Query language substitutions: {}
INFO-> JPA-QL strict compliance: enabled
INFO-> Second-level cache: enabled
INFO-> Query cache: disabled
INFO-> Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
INFO-> Optimize cache for minimal puts: disabled
INFO-> Structured second-level cache entries: disabled
INFO-> Statistics: disabled
INFO-> Deleted entity synthetic identifier rollback: disabled
INFO-> Default entity-mode: pojo
INFO-> Named query checking : enabled
INFO-> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
INFO-> building session factory
DEBUG-> Statistics initialized [enabled=false]}
DEBUG-> Session factory constructed with filter configurations : {}
DEBUG-> instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:hsqldb:hsql://localhost, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.ejb.discard_pc_on_close=false, hibernate.transaction.flush_before_completion=false, os.name=Windows 7, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_31\lib\resources.jar;C:\Program Files\Java\jre1.8.0_31\lib\rt.jar;C:\Program Files\Java\jre1.8.0_31\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_31\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_31\lib\jce.jar;C:\Program Files\Java\jre1.8.0_31\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_31\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_31\classes, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, java.runtime.version=1.8.0_31-b13, hibernate.connection.autocommit=true, javax.persistence.jdbc.user=sa, user.name=Smooth, hibernate.connection.release_mode=auto, user.language=es, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_31\bin, java.version=1.8.0_31, user.timezone=Europe/Paris, sun.arch.data.model=64, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_31\lib\endorsed, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=52.0, user.country=ES, java.home=C:\Program Files\Java\jre1.8.0_31, java.vm.info=mixed mode, os.version=6.1, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=25.31-b07, javax.persistence.jdbc.url=jdbc:hsqldb:hsql://localhost, user.variant=, sun.awt.enableExtraMouseButtons=true, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=sa, user.script=, user.home=C:\Users\Smooth, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=create, java.library.path=C:\Program Files\Java\jre1.8.0_31\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Java\jdk1.7.0_25\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\AMD\ATI.ACE\Core-Static;C:\apache-maven-3.3.1\bin;C:\Users\Smooth\Desktop\eclipseASW;;., java.vendor.url=http://java.oracle.com/, hibernate.connection.driver_class=org.hsqldb.jdbcDriver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=es.uniovi.asw.trivial.main.Main, java.class.path=C:\Users\Smooth\1\Trivial4b\game\target\classes;C:\Users\Smooth\1\Trivial4b\game\lib\antlr-2.7.6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\commons-collections-3.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\dom4j-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hibernate3.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hsqldb.jar;C:\Users\Smooth\1\Trivial4b\game\lib\javassist-3.12.0.GA.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jbossall-client.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jsp-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl-1.2.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jta-1.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\log4j-1.2.13.jar;C:\Users\Smooth\1\Trivial4b\game\lib\ojdbc6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\servlet-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-api-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-log4j12-1.6.1.jar;C:\Users\Smooth\.m2\repository\org\mongodb\mongo-java-driver\2.13.0\mongo-java-driver-2.13.0.jar;C:\Users\Smooth\.m2\repository\org\jgrapht\jgrapht-core\0.9.0\jgrapht-core-0.9.0.jar;C:\Users\Smooth\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.8, sun.cpu.endian=little, javax.persistence.jdbc.driver=org.hsqldb.jdbcDriver, sun.os.patch.level=Service Pack 1, java.io.tmpdir=C:\Users\Smooth\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, os.arch=amd64, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=C:\Program Files\Java\jre1.8.0_31\lib\ext;C:\Windows\Sun\Java\lib\ext, javax.persistence.jdbc.password=, user.dir=C:\Users\Smooth\1\Trivial4b\game, line.separator=
, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.8}
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG->  Version select: select id from TPREGUNTAS where id =?
DEBUG->  Snapshot select: select pregunta_.id, pregunta_.categoria as categoria5_, pregunta_.pregunta as pregunta5_ from TPREGUNTAS pregunta_ where pregunta_.id=?
DEBUG->  Insert 0: insert into TPREGUNTAS (categoria, pregunta, id) values (?, ?, ?)
DEBUG->  Update 0: update TPREGUNTAS set categoria=?, pregunta=? where id=?
DEBUG->  Delete 0: delete from TPREGUNTAS where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG->  Version select: select partida_id, usuario_id from TUSUARIOSPARTIDA where partida_id =? and usuario_id =?
DEBUG->  Snapshot select: select usuariospa_.partida_id, usuariospa_.usuario_id from TUSUARIOSPARTIDA usuariospa_ where usuariospa_.partida_id=? and usuariospa_.usuario_id=?
DEBUG->  Insert 0: insert into TUSUARIOSPARTIDA (partida_id, usuario_id) values (?, ?)
DEBUG->  Update 0: null
DEBUG->  Delete 0: delete from TUSUARIOSPARTIDA where partida_id=? and usuario_id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG->  Version select: select id from TUSUARIOS where id =?
DEBUG->  Snapshot select: select usuario_.id, usuario_.contrasenia as contrase2_0_, usuario_.nombre as nombre0_, usuario_.usuario as usuario0_ from TUSUARIOS usuario_ where usuario_.id=?
DEBUG->  Insert 0: insert into TUSUARIOS (contrasenia, nombre, usuario, id) values (?, ?, ?, ?)
DEBUG->  Update 0: update TUSUARIOS set contrasenia=?, nombre=?, usuario=? where id=?
DEBUG->  Delete 0: delete from TUSUARIOS where id=?
DEBUG->  Identity insert: insert into TUSUARIOS (id, contrasenia, nombre, usuario) values (default, ?, ?, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG->  Version select: select id from TRANKING where id =?
DEBUG->  Snapshot select: select ranking_.id, ranking_.PARTIDA_ID as PARTIDA2_2_ from TRANKING ranking_ where ranking_.id=?
DEBUG->  Insert 0: insert into TRANKING (PARTIDA_ID, id) values (?, ?)
DEBUG->  Update 0: update TRANKING set PARTIDA_ID=? where id=?
DEBUG->  Delete 0: delete from TRANKING where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG->  Version select: select id from TPARTIDA where id =?
DEBUG->  Snapshot select: select partida_.id, partida_.puntuacion as puntuacion3_ from TPARTIDA partida_ where partida_.id=?
DEBUG->  Insert 0: insert into TPARTIDA (puntuacion, id) values (?, ?)
DEBUG->  Update 0: update TPARTIDA set puntuacion=? where id=?
DEBUG->  Delete 0: delete from TPARTIDA where id=?
DEBUG->  Identity insert: insert into TPARTIDA (id, puntuacion) values (default, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG->  Version select: select id from TRESPUESTAS where id =?
DEBUG->  Snapshot select: select respuesta_.id, respuesta_.correcta as correcta4_, respuesta_.respuesta as respuesta4_ from TRESPUESTAS respuesta_ where respuesta_.id=?
DEBUG->  Insert 0: insert into TRESPUESTAS (correcta, respuesta, id) values (?, ?, ?)
DEBUG->  Update 0: update TRESPUESTAS set correcta=?, respuesta=? where id=?
DEBUG->  Delete 0: delete from TRESPUESTAS where id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set partida_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=? and usuario_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG->  Row insert: insert into TRANKING_TPREGUNTAS (TRANKING_id, pregunta_id) values (?, ?)
DEBUG->  Row update: update TRANKING_TPREGUNTAS set pregunta_id=? where TRANKING_id=? and pregunta_id=?
DEBUG->  Row delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=? and pregunta_id=?
DEBUG->  One-shot delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG->  Row insert: insert into TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id, respuestas_id) values (?, ?)
DEBUG->  Row update: update TPREGUNTAS_TRESPUESTAS set respuestas_id=? where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  Row delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  One-shot delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set usuario_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=? and partida_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [NONE]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [READ]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE_NOWAIT]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [FORCE]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_READ]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_WRITE]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id5_0_, pregunta0_.categoria as categoria5_0_, pregunta0_.pregunta as pregunta5_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [NONE]: select usuariospa0_.partida_id as partida1_1_3_, usuariospa0_.usuario_id as usuario2_1_3_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_, ranking2_.id as id2_1_, ranking2_.PARTIDA_ID as PARTIDA2_2_1_, usuario3_.id as id0_2_, usuario3_.contrasenia as contrase2_0_2_, usuario3_.nombre as nombre0_2_, usuario3_.usuario as usuario0_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [READ]: select usuariospa0_.partida_id as partida1_1_3_, usuariospa0_.usuario_id as usuario2_1_3_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_, ranking2_.id as id2_1_, ranking2_.PARTIDA_ID as PARTIDA2_2_1_, usuario3_.id as id0_2_, usuario3_.contrasenia as contrase2_0_2_, usuario3_.nombre as nombre0_2_, usuario3_.usuario as usuario0_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE]: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE_NOWAIT]: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [FORCE]: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_READ]: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_WRITE]: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC]: select usuariospa0_.partida_id as partida1_1_3_, usuariospa0_.usuario_id as usuario2_1_3_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_, ranking2_.id as id2_1_, ranking2_.PARTIDA_ID as PARTIDA2_2_1_, usuario3_.id as id0_2_, usuario3_.contrasenia as contrase2_0_2_, usuario3_.nombre as nombre0_2_, usuario3_.usuario as usuario0_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_1_3_, usuariospa0_.usuario_id as usuario2_1_3_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_, ranking2_.id as id2_1_, ranking2_.PARTIDA_ID as PARTIDA2_2_1_, usuario3_.id as id0_2_, usuario3_.contrasenia as contrase2_0_2_, usuario3_.nombre as nombre0_2_, usuario3_.usuario as usuario0_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_1_0_, usuariospa0_.usuario_id as usuario2_1_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [NONE]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [READ]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE_NOWAIT]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [FORCE]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_READ]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_WRITE]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id0_0_, usuario0_.contrasenia as contrase2_0_0_, usuario0_.nombre as nombre0_0_, usuario0_.usuario as usuario0_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id2_1_, ranking0_.PARTIDA_ID as PARTIDA2_2_1_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [READ]: select ranking0_.id as id2_1_, ranking0_.PARTIDA_ID as PARTIDA2_2_1_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE]: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE_NOWAIT]: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [FORCE]: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_READ]: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_WRITE]: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC]: select ranking0_.id as id2_1_, ranking0_.PARTIDA_ID as PARTIDA2_2_1_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id2_1_, ranking0_.PARTIDA_ID as PARTIDA2_2_1_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id2_0_, ranking0_.PARTIDA_ID as PARTIDA2_2_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id2_1_, ranking0_.PARTIDA_ID as PARTIDA2_2_1_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.PARTIDA_ID=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [NONE]: select partida0_.id as id3_1_, partida0_.puntuacion as puntuacion3_1_, ranking1_.id as id2_0_, ranking1_.PARTIDA_ID as PARTIDA2_2_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [READ]: select partida0_.id as id3_1_, partida0_.puntuacion as puntuacion3_1_, ranking1_.id as id2_0_, ranking1_.PARTIDA_ID as PARTIDA2_2_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE]: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE_NOWAIT]: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [FORCE]: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_READ]: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_WRITE]: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_FORCE_INCREMENT]: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC]: select partida0_.id as id3_1_, partida0_.puntuacion as puntuacion3_1_, ranking1_.id as id2_0_, ranking1_.PARTIDA_ID as PARTIDA2_2_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC_FORCE_INCREMENT]: select partida0_.id as id3_1_, partida0_.puntuacion as puntuacion3_1_, ranking1_.id as id2_0_, ranking1_.PARTIDA_ID as PARTIDA2_2_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id3_0_, partida0_.puntuacion as puntuacion3_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [NONE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [READ]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE_NOWAIT]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [FORCE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_READ]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_WRITE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas: select partidas0_.partida_id as partida1_3_2_, partidas0_.partida_id as partida1_2_, partidas0_.usuario_id as usuario2_2_, partidas0_.partida_id as partida1_1_1_, partidas0_.usuario_id as usuario2_1_1_, usuario1_.id as id0_0_, usuario1_.contrasenia as contrase2_0_0_, usuario1_.nombre as nombre0_0_, usuario1_.usuario as usuario0_0_ from TUSUARIOSPARTIDA partidas0_ inner join TUSUARIOS usuario1_ on partidas0_.usuario_id=usuario1_.id where partidas0_.partida_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta: select pregunta0_.TRANKING_id as TRANKING1_2_1_, pregunta0_.pregunta_id as pregunta2_1_, pregunta1_.id as id5_0_, pregunta1_.categoria as categoria5_0_, pregunta1_.pregunta as pregunta5_0_ from TRANKING_TPREGUNTAS pregunta0_ inner join TPREGUNTAS pregunta1_ on pregunta0_.pregunta_id=pregunta1_.id where pregunta0_.TRANKING_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas: select respuestas0_.TPREGUNTAS_id as TPREGUNTAS1_5_1_, respuestas0_.respuestas_id as respuestas2_1_, respuesta1_.id as id4_0_, respuesta1_.correcta as correcta4_0_, respuesta1_.respuesta as respuesta4_0_ from TPREGUNTAS_TRESPUESTAS respuestas0_ inner join TRESPUESTAS respuesta1_ on respuestas0_.respuestas_id=respuesta1_.id where respuestas0_.TPREGUNTAS_id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas: select partidas0_.usuario_id as usuario2_0_3_, partidas0_.partida_id as partida1_3_, partidas0_.usuario_id as usuario2_3_, partidas0_.partida_id as partida1_1_2_, partidas0_.usuario_id as usuario2_1_2_, partida1_.id as id3_0_, partida1_.puntuacion as puntuacion3_0_, ranking2_.id as id2_1_, ranking2_.PARTIDA_ID as PARTIDA2_2_1_ from TUSUARIOSPARTIDA partidas0_ inner join TPARTIDA partida1_ on partidas0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID where partidas0_.usuario_id=?
DEBUG-> initializing class SessionFactoryObjectFactory
DEBUG-> registered: df668ef8-b31d-40f6-b05f-d73c368dca0d (unnamed)
INFO-> Not binding factory to JNDI, no JNDI name configured
DEBUG-> instantiated session factory
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
INFO-> Running hbm2ddl schema export
DEBUG-> import file not found: /import.sql
INFO-> exporting generated schema to database
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79DF91EA6BD
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79D6B7A9219
DEBUG-> alter table TRANKING drop constraint FK7AFB114276E97130
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2C5A031C4
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2CA8D67E4
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A76E97130
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A2AB62F50
DEBUG-> drop table TPARTIDA if exists
DEBUG-> drop table TPREGUNTAS if exists
DEBUG-> drop table TPREGUNTAS_TRESPUESTAS if exists
DEBUG-> drop table TRANKING if exists
DEBUG-> drop table TRANKING_TPREGUNTAS if exists
DEBUG-> drop table TRESPUESTAS if exists
DEBUG-> drop table TUSUARIOS if exists
DEBUG-> drop table TUSUARIOSPARTIDA if exists
DEBUG-> create table TPARTIDA (id bigint generated by default as identity (start with 1), puntuacion integer, primary key (id))
DEBUG-> create table TPREGUNTAS (id bigint not null, categoria varchar(255), pregunta varchar(255), primary key (id))
DEBUG-> create table TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id bigint not null, respuestas_id bigint not null, primary key (TPREGUNTAS_id, respuestas_id), unique (respuestas_id))
DEBUG-> create table TRANKING (id bigint not null, PARTIDA_ID bigint, primary key (id))
DEBUG-> create table TRANKING_TPREGUNTAS (TRANKING_id bigint not null, pregunta_id bigint not null, primary key (TRANKING_id, pregunta_id), unique (pregunta_id))
DEBUG-> create table TRESPUESTAS (id bigint not null, correcta bit not null, respuesta varchar(255), primary key (id))
DEBUG-> create table TUSUARIOS (id bigint generated by default as identity (start with 1), contrasenia varchar(255), nombre varchar(255), usuario varchar(255), primary key (id))
DEBUG-> create table TUSUARIOSPARTIDA (partida_id bigint, usuario_id bigint, primary key (partida_id, usuario_id))
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79DF91EA6BD foreign key (respuestas_id) references TRESPUESTAS
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79D6B7A9219 foreign key (TPREGUNTAS_id) references TPREGUNTAS
DEBUG-> alter table TRANKING add constraint FK7AFB114276E97130 foreign key (PARTIDA_ID) references TPARTIDA
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2C5A031C4 foreign key (TRANKING_id) references TRANKING
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2CA8D67E4 foreign key (pregunta_id) references TPREGUNTAS
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A76E97130 foreign key (partida_id) references TPARTIDA
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A2AB62F50 foreign key (usuario_id) references TUSUARIOS
INFO-> schema export complete
DEBUG-> Checking 1 named HQL queries
DEBUG-> Checking named query: Usuario.findAll
DEBUG-> parse() - HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  |  +-[IDENT] Node: 'es'
       |     |  |  |  |  |  |  |  |  |  \-[IDENT] Node: 'uniovi'
       |     |  |  |  |  |  |  |  |  \-[IDENT] Node: 'asw'
       |     |  |  |  |  |  |  |  \-[IDENT] Node: 'trivial'
       |     |  |  |  |  |  |  \-[IDENT] Node: 'db'
       |     |  |  |  |  |  \-[IDENT] Node: 'impl'
       |     |  |  |  |  \-[IDENT] Node: 'local'
       |     |  |  |  \-[IDENT] Node: 'persistencia'
       |     |  |  \-[IDENT] Node: 'model'
       |     |  \-[IDENT] Node: 'Usuario'
       |     \-[ALIAS] Node: 'u'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'u'

DEBUG-> throwQueryException() : no errors
DEBUG-> select << begin [level=1, statement=select]
DEBUG-> FromClause{level=1} :  es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario (u) -> usuario0_
DEBUG-> Resolved :  u -> usuario0_.id
DEBUG-> select : finishing up [level=1, statement=select]
DEBUG-> processQuery() :  ( SELECT ( {select clause} usuario0_.id ) ( FromClause{level=1} TUSUARIOS usuario0_ ) )
DEBUG-> Using FROM fragment [TUSUARIOS usuario0_]
DEBUG-> select >> end [level=1, statement=select]
DEBUG-> --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (TUSUARIOS)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'usuario0_.id as id0_' {alias=u, className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario, tableAlias=usuario0_}
    |  \-[SQL_TOKEN] SqlFragment: 'usuario0_.contrasenia as contrase2_0_, usuario0_.nombre as nombre0_, usuario0_.usuario as usuario0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[usuario0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'TUSUARIOS usuario0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=TUSUARIOS,tableAlias=usuario0_,origin=null,columns={,className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario}}

DEBUG-> throwQueryException() : no errors
DEBUG-> HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> SQL: select usuario0_.id as id0_, usuario0_.contrasenia as contrase2_0_, usuario0_.nombre as nombre0_, usuario0_.usuario as usuario0_ from TUSUARIOS usuario0_
DEBUG-> throwQueryException() : no errors
DEBUG-> Checking 0 named SQL queries
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@5a142ce6
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@5a142ce6
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@5a142ce6
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@7f81708a
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@2625bb6a
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@65f5f412
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@57bd03cf
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@57bd03cf
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@57bd03cf
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@7dd8a78e
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@7dd8a78e
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@7dd8a78e
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@3240614a
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@3240614a
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@3240614a
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@4cba39c4
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@4cba39c4
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@4cba39c4
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@70c6a661
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@70c6a661
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@70c6a661
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@139dddc7
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@139dddc7
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@139dddc7
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@5fd794e1
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@5fd794e1
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@5fd794e1
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4500bf76
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4500bf76
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@76da45cf
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@76da45cf
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@75dcae19
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@75dcae19
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@526cb43
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@526cb43
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@326fbd76
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@326fbd76
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@9d4607f
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@9d4607f
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@4b849be2
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b849be2
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b849be2
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2385363a
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@19157a4
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@19157a4
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@19157a4
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@5ddcd541
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@63766f36
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@63766f36
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@35f22f84
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@35f22f84
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@fef9ed6
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@fef9ed6
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@4f801dec
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@4f801dec
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@59fcc350
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@59fcc350
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@422f2ce9
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@136b279
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@7551deeb
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@7551deeb
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@7551deeb
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@3024ba0
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@3024ba0
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@3024ba0
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@a827c12
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@b8323aa
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@b8323aa
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@b8323aa
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@175e6cd6
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@175e6cd6
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@175e6cd6
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@977000a
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@414814fa
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@414814fa
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@1921ffe2
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@2a083aac
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@2a083aac
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@c44f611
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@64cd722c
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@6bc94e91
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@6bc94e91
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@6fe9af2a
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4ef5d980
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@48d242d
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@77d469d2
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@556618fd
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@353fe208
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@58fe14ce
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@c306cfa
INFO-> Hibernate Commons Annotations 3.2.0.Final
INFO-> Hibernate 3.6.0.Final
INFO-> hibernate.properties not found
INFO-> Bytecode provider name : javassist
INFO-> using JDK 1.4 java.sql.Timestamp handling
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
INFO-> Hibernate EntityManager 3.6.0.Final
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@5a142ce6
DEBUG-> Adding type registration boolean -> org.hibernate.type.BooleanType@5a142ce6
DEBUG-> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@5a142ce6
DEBUG-> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@7f81708a
DEBUG-> Adding type registration true_false -> org.hibernate.type.TrueFalseType@2625bb6a
DEBUG-> Adding type registration yes_no -> org.hibernate.type.YesNoType@65f5f412
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@57bd03cf
DEBUG-> Adding type registration byte -> org.hibernate.type.ByteType@57bd03cf
DEBUG-> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@57bd03cf
DEBUG-> Adding type registration character -> org.hibernate.type.CharacterType@7dd8a78e
DEBUG-> Adding type registration char -> org.hibernate.type.CharacterType@7dd8a78e
DEBUG-> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@7dd8a78e
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@3240614a
DEBUG-> Adding type registration short -> org.hibernate.type.ShortType@3240614a
DEBUG-> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@3240614a
DEBUG-> Adding type registration integer -> org.hibernate.type.IntegerType@4cba39c4
DEBUG-> Adding type registration int -> org.hibernate.type.IntegerType@4cba39c4
DEBUG-> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@4cba39c4
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@70c6a661
DEBUG-> Adding type registration long -> org.hibernate.type.LongType@70c6a661
DEBUG-> Adding type registration java.lang.Long -> org.hibernate.type.LongType@70c6a661
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@139dddc7
DEBUG-> Adding type registration float -> org.hibernate.type.FloatType@139dddc7
DEBUG-> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@139dddc7
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@5fd794e1
DEBUG-> Adding type registration double -> org.hibernate.type.DoubleType@5fd794e1
DEBUG-> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@5fd794e1
DEBUG-> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@4500bf76
DEBUG-> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@4500bf76
DEBUG-> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@76da45cf
DEBUG-> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@76da45cf
DEBUG-> Adding type registration string -> org.hibernate.type.StringType@75dcae19
DEBUG-> Adding type registration java.lang.String -> org.hibernate.type.StringType@75dcae19
DEBUG-> Adding type registration url -> org.hibernate.type.UrlType@526cb43
DEBUG-> Adding type registration java.net.URL -> org.hibernate.type.UrlType@526cb43
DEBUG-> Adding type registration date -> org.hibernate.type.DateType@326fbd76
DEBUG-> Adding type registration java.sql.Date -> org.hibernate.type.DateType@326fbd76
DEBUG-> Adding type registration time -> org.hibernate.type.TimeType@9d4607f
DEBUG-> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@9d4607f
DEBUG-> Adding type registration timestamp -> org.hibernate.type.TimestampType@4b849be2
DEBUG-> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4b849be2
DEBUG-> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4b849be2
DEBUG-> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2385363a
DEBUG-> Adding type registration calendar -> org.hibernate.type.CalendarType@19157a4
DEBUG-> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@19157a4
DEBUG-> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@19157a4
DEBUG-> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@5ddcd541
DEBUG-> Adding type registration locale -> org.hibernate.type.LocaleType@63766f36
DEBUG-> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@63766f36
DEBUG-> Adding type registration currency -> org.hibernate.type.CurrencyType@35f22f84
DEBUG-> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@35f22f84
DEBUG-> Adding type registration timezone -> org.hibernate.type.TimeZoneType@fef9ed6
DEBUG-> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@fef9ed6
DEBUG-> Adding type registration class -> org.hibernate.type.ClassType@4f801dec
DEBUG-> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@4f801dec
DEBUG-> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@59fcc350
DEBUG-> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@59fcc350
DEBUG-> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@422f2ce9
DEBUG-> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@136b279
DEBUG-> Adding type registration binary -> org.hibernate.type.BinaryType@7551deeb
DEBUG-> Adding type registration byte[] -> org.hibernate.type.BinaryType@7551deeb
DEBUG-> Adding type registration [B -> org.hibernate.type.BinaryType@7551deeb
DEBUG-> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@3024ba0
DEBUG-> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@3024ba0
DEBUG-> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@3024ba0
DEBUG-> Adding type registration image -> org.hibernate.type.ImageType@a827c12
DEBUG-> Adding type registration characters -> org.hibernate.type.CharArrayType@b8323aa
DEBUG-> Adding type registration char[] -> org.hibernate.type.CharArrayType@b8323aa
DEBUG-> Adding type registration [C -> org.hibernate.type.CharArrayType@b8323aa
DEBUG-> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@175e6cd6
DEBUG-> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@175e6cd6
DEBUG-> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@175e6cd6
DEBUG-> Adding type registration text -> org.hibernate.type.TextType@977000a
DEBUG-> Adding type registration blob -> org.hibernate.type.BlobType@414814fa
DEBUG-> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@414814fa
DEBUG-> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@1921ffe2
DEBUG-> Adding type registration clob -> org.hibernate.type.ClobType@2a083aac
DEBUG-> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@2a083aac
DEBUG-> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@c44f611
DEBUG-> Adding type registration serializable -> org.hibernate.type.SerializableType@64cd722c
DEBUG-> Adding type registration object -> org.hibernate.type.ObjectType@6bc94e91
DEBUG-> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@6bc94e91
DEBUG-> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1244efef
DEBUG-> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@7336edf0
DEBUG-> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@cc3376f
DEBUG-> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2a0d29f5
DEBUG-> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1f8380cc
DEBUG-> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@5b1ea7a1
DEBUG-> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@4e739be2
DEBUG-> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@d725158
DEBUG-> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
DEBUG-> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
DEBUG-> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
DEBUG-> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
DEBUG-> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
DEBUG-> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
DEBUG-> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
DEBUG-> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
DEBUG-> Look up for persistence unit: carworkshop
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Searching mapped entities in jar/par: file:/C:/Users/Smooth/1/Trivial4b/game/target/classes/
DEBUG-> Filtering: es.uniovi.asw.trivial.db.DBManager
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.LocalHSQLDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.PartidaFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.SimplePersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.impl.UsuarioFinderImpl
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PartidaFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.PersistenceFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.UsuarioFinder
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.consultas.util.Jpa
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.infrastucture.Factories
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.JustLoadHibernate
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.type.UsuarioPartidaKey
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Java element filter matched for es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Filtering: es.uniovi.asw.trivial.db.impl.remote.RemoteMongoDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.LocalDB
DEBUG-> Filtering: es.uniovi.asw.trivial.db.RemoteDB
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.DBFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.GrafoFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.factories.TableroFactory
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Grafo
DEBUG-> Filtering: es.uniovi.asw.trivial.game.Trivial
DEBUG-> Filtering: es.uniovi.asw.trivial.main.Main
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Pregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaComparator
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.PreguntaGame
DEBUG-> Filtering: es.uniovi.asw.trivial.model.pregunta.Respuesta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Action
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaFinal
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaQuesito
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar$1
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.casilla.impl.CasillaVuelveATirar
DEBUG-> Filtering: es.uniovi.asw.trivial.model.tablero.Casilla
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAcercade
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoAjustes
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoEstadisticas
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoJugadores
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.DialogoPregunta
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.ModeloNoEditable
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$1
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$2
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$3
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$4
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$5
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$6
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$7
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$8
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal$9
DEBUG-> Filtering: es.uniovi.asw.trivial.ui.VentanaPrincipal
DEBUG-> File Filter matched for META-INF/orm.xml
DEBUG-> Detect class: true; detect hbm: true
DEBUG-> Creating Factory: carworkshop
DEBUG-> trying to resolve system-id [file:///C:/Users/Smooth/1/Trivial4b/game/orm_2_0.xsd]
INFO-> Binding Named query: Usuario.findAll => select u from Usuario u
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Pregunta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta on table TPREGUNTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=categoria, insertable=true, updatable=true, unique=false}
DEBUG-> binding property categoria with lazy=false
DEBUG-> building SimpleValue for categoria
DEBUG-> Building property categoria
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property pregunta with lazy=false
DEBUG-> building SimpleValue for pregunta
DEBUG-> Building property pregunta
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPREGUNTAS), mappingColumn=respuestas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='respuestas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Building property respuestas
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Usuario
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario on table TUSUARIOS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=contrasenia, insertable=true, updatable=true, unique=false}
DEBUG-> binding property contrasenia with lazy=false
DEBUG-> building SimpleValue for contrasenia
DEBUG-> Building property contrasenia
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=nombre, insertable=true, updatable=true, unique=false}
DEBUG-> binding property nombre with lazy=false
DEBUG-> building SimpleValue for nombre
DEBUG-> Building property nombre
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='usuario'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOS), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Partida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida on table TPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=partidas_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='partidas_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Building property partidas
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=puntuacion, insertable=true, updatable=true, unique=false}
DEBUG-> binding property puntuacion with lazy=false
DEBUG-> building SimpleValue for puntuacion
DEBUG-> Building property puntuacion
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='partida'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TPARTIDA), mappingColumn=ranking, insertable=true, updatable=true, unique=false}
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name UsuariosPartida
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida on table TUSUARIOSPARTIDA
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property partida with lazy=false
DEBUG-> building SimpleValue for partida
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> binding property usuario with lazy=false
DEBUG-> building SimpleValue for usuario
DEBUG-> Building property usuario
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TUSUARIOSPARTIDA), mappingColumn=usuario, insertable=true, updatable=true, unique=false}
DEBUG-> Building property usuario
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Respuesta
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta on table TRESPUESTAS
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=correcta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property correcta with lazy=false
DEBUG-> building SimpleValue for correcta
DEBUG-> Building property correcta
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRESPUESTAS), mappingColumn=respuesta, insertable=true, updatable=true, unique=false}
DEBUG-> binding property respuesta with lazy=false
DEBUG-> building SimpleValue for respuesta
DEBUG-> Building property respuesta
INFO-> Binding entity from annotated class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
DEBUG-> no value specified for 'javax.persistence.sharedCache.mode'; using UNSPECIFIED
DEBUG-> Import with entity name Ranking
INFO-> Bind entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking on table TRANKING
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=id, insertable=true, updatable=true, unique=false}
DEBUG-> binding property id with lazy=false
DEBUG-> building SimpleValue for id
DEBUG-> Building property id
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='PARTIDA_ID', referencedColumn='', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=partida, insertable=true, updatable=true, unique=false}
DEBUG-> Building property partida
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=null, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=element, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3Column{table=org.hibernate.mapping.Table(TRANKING), mappingColumn=pregunta_KEY, insertable=true, updatable=true, unique=false}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='pregunta_KEY', referencedColumn='null', mappedBy='null'}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
DEBUG-> Collection role: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Building property pregunta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for categoria
DEBUG-> Setting SimpleValue typeName for pregunta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for contrasenia
DEBUG-> Setting SimpleValue typeName for nombre
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for puntuacion
DEBUG-> Setting SimpleValue typeName for partida
DEBUG-> Setting SimpleValue typeName for usuario
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> Setting SimpleValue typeName for correcta
DEBUG-> Setting SimpleValue typeName for respuesta
DEBUG-> Setting SimpleValue typeName for id
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta through an association table
DEBUG-> Mapped collection key: TRANKING_id, element: pregunta_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas through an association table
DEBUG-> Mapped collection key: TPREGUNTAS_id, element: respuestas_id
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.usuario
DEBUG-> Mapped collection key: usuario_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Second pass for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG-> Binding a OneToMany: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas through a foreign key
INFO-> Mapping collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas -> TUSUARIOSPARTIDA
DEBUG-> Retrieving property es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida.partida
DEBUG-> Mapped collection key: partida_id, one-to-many: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG-> Building property ranking
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
INFO-> Hibernate Validator not found: ignoring
DEBUG-> No JNDI name configured for binding Ejb3Configuration
DEBUG-> Preparing to build session factory with filters : {}
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Legacy Validator not present in classpath, ignoring event listener registration
DEBUG-> Search not present in classpath, ignoring event listener registration.
INFO-> Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
INFO-> Using Hibernate built-in connection pool (not for production use!)
INFO-> Hibernate connection pool size: 20
INFO-> autocommit mode: true
INFO-> using driver: org.hsqldb.jdbcDriver at URL: jdbc:hsqldb:hsql://localhost
INFO-> connection properties: {user=sa, autocommit=true, release_mode=auto}
DEBUG-> opening new JDBC connection
DEBUG-> created connection to: jdbc:hsqldb:hsql://localhost, Isolation Level: 2
INFO-> Database ->
       name : HSQL Database Engine
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.9
      major : 2
      minor : 2
INFO-> Using dialect: org.hibernate.dialect.HSQLDialect
INFO-> Transaction strategy: org.hibernate.transaction.JDBCTransactionFactory
INFO-> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
INFO-> Automatic flush during beforeCompletion(): disabled
INFO-> Automatic session close at end of transaction: disabled
INFO-> JDBC batch size: 15
INFO-> JDBC batch updates for versioned data: disabled
INFO-> Scrollable result sets: enabled
DEBUG-> Wrap result sets: disabled
INFO-> JDBC3 getGeneratedKeys(): enabled
INFO-> Connection release mode: auto
INFO-> Default batch fetch size: 1
INFO-> Generate SQL with comments: disabled
INFO-> Order SQL updates by primary key: disabled
INFO-> Order SQL inserts for batching: disabled
INFO-> Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
INFO-> Using ASTQueryTranslatorFactory
INFO-> Query language substitutions: {}
INFO-> JPA-QL strict compliance: enabled
INFO-> Second-level cache: enabled
INFO-> Query cache: disabled
INFO-> Cache region factory : org.hibernate.cache.impl.NoCachingRegionFactory
INFO-> Optimize cache for minimal puts: disabled
INFO-> Structured second-level cache entries: disabled
INFO-> Statistics: disabled
INFO-> Deleted entity synthetic identifier rollback: disabled
INFO-> Default entity-mode: pojo
INFO-> Named query checking : enabled
INFO-> Check Nullability in Core (should be disabled when Bean Validation is on): enabled
INFO-> building session factory
DEBUG-> Statistics initialized [enabled=false]}
DEBUG-> Session factory constructed with filter configurations : {}
DEBUG-> instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:hsqldb:hsql://localhost, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.ejb.discard_pc_on_close=false, hibernate.transaction.flush_before_completion=false, os.name=Windows 7, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_31\lib\resources.jar;C:\Program Files\Java\jre1.8.0_31\lib\rt.jar;C:\Program Files\Java\jre1.8.0_31\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_31\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_31\lib\jce.jar;C:\Program Files\Java\jre1.8.0_31\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_31\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_31\classes, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, java.runtime.version=1.8.0_31-b13, hibernate.connection.autocommit=true, javax.persistence.jdbc.user=sa, user.name=Smooth, hibernate.connection.release_mode=auto, user.language=es, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_31\bin, java.version=1.8.0_31, user.timezone=Europe/Paris, sun.arch.data.model=64, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_31\lib\endorsed, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, java.class.version=52.0, user.country=ES, java.home=C:\Program Files\Java\jre1.8.0_31, java.vm.info=mixed mode, os.version=6.1, hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=25.31-b07, javax.persistence.jdbc.url=jdbc:hsqldb:hsql://localhost, user.variant=, sun.awt.enableExtraMouseButtons=true, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=sa, user.script=, user.home=C:\Users\Smooth, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=create, java.library.path=C:\Program Files\Java\jre1.8.0_31\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Java\jdk1.7.0_25\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\AMD\ATI.ACE\Core-Static;C:\apache-maven-3.3.1\bin;C:\Users\Smooth\Desktop\eclipseASW;;., java.vendor.url=http://java.oracle.com/, hibernate.connection.driver_class=org.hsqldb.jdbcDriver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=es.uniovi.asw.trivial.main.Main, java.class.path=C:\Users\Smooth\1\Trivial4b\game\target\classes;C:\Users\Smooth\1\Trivial4b\game\lib\antlr-2.7.6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\commons-collections-3.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\dom4j-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hibernate3.jar;C:\Users\Smooth\1\Trivial4b\game\lib\hsqldb.jar;C:\Users\Smooth\1\Trivial4b\game\lib\javassist-3.12.0.GA.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jbossall-client.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jsp-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl-1.2.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jstl.jar;C:\Users\Smooth\1\Trivial4b\game\lib\jta-1.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\log4j-1.2.13.jar;C:\Users\Smooth\1\Trivial4b\game\lib\ojdbc6.jar;C:\Users\Smooth\1\Trivial4b\game\lib\servlet-api.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-api-1.6.1.jar;C:\Users\Smooth\1\Trivial4b\game\lib\slf4j-log4j12-1.6.1.jar;C:\Users\Smooth\.m2\repository\org\mongodb\mongo-java-driver\2.13.0\mongo-java-driver-2.13.0.jar;C:\Users\Smooth\.m2\repository\org\jgrapht\jgrapht-core\0.9.0\jgrapht-core-0.9.0.jar;C:\Users\Smooth\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar, hibernate.bytecode.use_reflection_optimizer=false, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.8, sun.cpu.endian=little, javax.persistence.jdbc.driver=org.hsqldb.jdbcDriver, sun.os.patch.level=Service Pack 1, java.io.tmpdir=C:\Users\Smooth\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, os.arch=amd64, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.ext.dirs=C:\Program Files\Java\jre1.8.0_31\lib\ext;C:\Windows\Sun\Java\lib\ext, javax.persistence.jdbc.password=, user.dir=C:\Users\Smooth\1\Trivial4b\game, line.separator=
, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.8}
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG->  Version select: select id from TPREGUNTAS where id =?
DEBUG->  Snapshot select: select pregunta_.id, pregunta_.categoria as categoria0_, pregunta_.pregunta as pregunta0_ from TPREGUNTAS pregunta_ where pregunta_.id=?
DEBUG->  Insert 0: insert into TPREGUNTAS (categoria, pregunta, id) values (?, ?, ?)
DEBUG->  Update 0: update TPREGUNTAS set categoria=?, pregunta=? where id=?
DEBUG->  Delete 0: delete from TPREGUNTAS where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida
DEBUG->  Version select: select partida_id, usuario_id from TUSUARIOSPARTIDA where partida_id =? and usuario_id =?
DEBUG->  Snapshot select: select usuariospa_.partida_id, usuariospa_.usuario_id from TUSUARIOSPARTIDA usuariospa_ where usuariospa_.partida_id=? and usuariospa_.usuario_id=?
DEBUG->  Insert 0: insert into TUSUARIOSPARTIDA (partida_id, usuario_id) values (?, ?)
DEBUG->  Update 0: null
DEBUG->  Delete 0: delete from TUSUARIOSPARTIDA where partida_id=? and usuario_id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG->  Version select: select id from TUSUARIOS where id =?
DEBUG->  Snapshot select: select usuario_.id, usuario_.contrasenia as contrase2_1_, usuario_.nombre as nombre1_, usuario_.usuario as usuario1_ from TUSUARIOS usuario_ where usuario_.id=?
DEBUG->  Insert 0: insert into TUSUARIOS (contrasenia, nombre, usuario, id) values (?, ?, ?, ?)
DEBUG->  Update 0: update TUSUARIOS set contrasenia=?, nombre=?, usuario=? where id=?
DEBUG->  Delete 0: delete from TUSUARIOS where id=?
DEBUG->  Identity insert: insert into TUSUARIOS (id, contrasenia, nombre, usuario) values (default, ?, ?, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG->  Version select: select id from TRANKING where id =?
DEBUG->  Snapshot select: select ranking_.id, ranking_.PARTIDA_ID as PARTIDA2_5_ from TRANKING ranking_ where ranking_.id=?
DEBUG->  Insert 0: insert into TRANKING (PARTIDA_ID, id) values (?, ?)
DEBUG->  Update 0: update TRANKING set PARTIDA_ID=? where id=?
DEBUG->  Delete 0: delete from TRANKING where id=?
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG->  Version select: select id from TPARTIDA where id =?
DEBUG->  Snapshot select: select partida_.id, partida_.puntuacion as puntuacion2_ from TPARTIDA partida_ where partida_.id=?
DEBUG->  Insert 0: insert into TPARTIDA (puntuacion, id) values (?, ?)
DEBUG->  Update 0: update TPARTIDA set puntuacion=? where id=?
DEBUG->  Delete 0: delete from TPARTIDA where id=?
DEBUG->  Identity insert: insert into TPARTIDA (id, puntuacion) values (default, ?)
DEBUG-> Static SQL for entity: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG->  Version select: select id from TRESPUESTAS where id =?
DEBUG->  Snapshot select: select respuesta_.id, respuesta_.correcta as correcta4_, respuesta_.respuesta as respuesta4_ from TRESPUESTAS respuesta_ where respuesta_.id=?
DEBUG->  Insert 0: insert into TRESPUESTAS (correcta, respuesta, id) values (?, ?, ?)
DEBUG->  Update 0: update TRESPUESTAS set correcta=?, respuesta=? where id=?
DEBUG->  Delete 0: delete from TRESPUESTAS where id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set partida_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=? and usuario_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set partida_id=null where partida_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta
DEBUG->  Row insert: insert into TRANKING_TPREGUNTAS (TRANKING_id, pregunta_id) values (?, ?)
DEBUG->  Row update: update TRANKING_TPREGUNTAS set pregunta_id=? where TRANKING_id=? and pregunta_id=?
DEBUG->  Row delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=? and pregunta_id=?
DEBUG->  One-shot delete: delete from TRANKING_TPREGUNTAS where TRANKING_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas
DEBUG->  Row insert: insert into TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id, respuestas_id) values (?, ?)
DEBUG->  Row update: update TPREGUNTAS_TRESPUESTAS set respuestas_id=? where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  Row delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=? and respuestas_id=?
DEBUG->  One-shot delete: delete from TPREGUNTAS_TRESPUESTAS where TPREGUNTAS_id=?
DEBUG-> Static SQL for collection: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas
DEBUG->  Row insert: update TUSUARIOSPARTIDA set usuario_id=? where partida_id=? and usuario_id=?
DEBUG->  Row delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=? and partida_id=?
DEBUG->  One-shot delete: update TUSUARIOSPARTIDA set usuario_id=null where usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [NONE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [READ]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [UPGRADE_NOWAIT]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [FORCE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_READ]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_WRITE]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [PESSIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta [OPTIMISTIC_FORCE_INCREMENT]: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta: select pregunta0_.id as id0_0_, pregunta0_.categoria as categoria0_0_, pregunta0_.pregunta as pregunta0_0_ from TPREGUNTAS pregunta0_ where pregunta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [NONE]: select usuariospa0_.partida_id as partida1_3_3_, usuariospa0_.usuario_id as usuario2_3_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [READ]: select usuariospa0_.partida_id as partida1_3_3_, usuariospa0_.usuario_id as usuario2_3_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE]: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [UPGRADE_NOWAIT]: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [FORCE]: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_READ]: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_WRITE]: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [PESSIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC]: select usuariospa0_.partida_id as partida1_3_3_, usuariospa0_.usuario_id as usuario2_3_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida [OPTIMISTIC_FORCE_INCREMENT]: select usuariospa0_.partida_id as partida1_3_3_, usuariospa0_.usuario_id as usuario2_3_3_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_, usuario3_.id as id1_2_, usuario3_.contrasenia as contrase2_1_2_, usuario3_.nombre as nombre1_2_, usuario3_.usuario as usuario1_2_ from TUSUARIOSPARTIDA usuariospa0_ inner join TPARTIDA partida1_ on usuariospa0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID inner join TUSUARIOS usuario3_ on usuariospa0_.usuario_id=usuario3_.id where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.UsuariosPartida: select usuariospa0_.partida_id as partida1_3_0_, usuariospa0_.usuario_id as usuario2_3_0_ from TUSUARIOSPARTIDA usuariospa0_ where usuariospa0_.partida_id=? and usuariospa0_.usuario_id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [NONE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [READ]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [UPGRADE_NOWAIT]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [FORCE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_READ]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_WRITE]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [PESSIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario [OPTIMISTIC_FORCE_INCREMENT]: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario: select usuario0_.id as id1_0_, usuario0_.contrasenia as contrase2_1_0_, usuario0_.nombre as nombre1_0_, usuario0_.usuario as usuario1_0_ from TUSUARIOS usuario0_ where usuario0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [READ]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [UPGRADE_NOWAIT]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [FORCE]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_READ]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_WRITE]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [PESSIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [OPTIMISTIC_FORCE_INCREMENT]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking: select ranking0_.id as id5_0_, ranking0_.PARTIDA_ID as PARTIDA2_5_0_ from TRANKING ranking0_ where ranking0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking [NONE]: select ranking0_.id as id5_1_, ranking0_.PARTIDA_ID as PARTIDA2_5_1_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_ from TRANKING ranking0_ left outer join TPARTIDA partida1_ on ranking0_.PARTIDA_ID=partida1_.id where ranking0_.PARTIDA_ID=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [NONE]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [READ]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [UPGRADE_NOWAIT]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [FORCE]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_READ]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_WRITE]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [PESSIMISTIC_FORCE_INCREMENT]: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida [OPTIMISTIC_FORCE_INCREMENT]: select partida0_.id as id2_1_, partida0_.puntuacion as puntuacion2_1_, ranking1_.id as id5_0_, ranking1_.PARTIDA_ID as PARTIDA2_5_0_ from TPARTIDA partida0_ left outer join TRANKING ranking1_ on partida0_.id=ranking1_.PARTIDA_ID where partida0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida: select partida0_.id as id2_0_, partida0_.puntuacion as puntuacion2_0_ from TPARTIDA partida0_ where partida0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [NONE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [READ]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [UPGRADE_NOWAIT]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [FORCE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_READ]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_WRITE]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [PESSIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta [OPTIMISTIC_FORCE_INCREMENT]: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_MERGE on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for action ACTION_REFRESH on entity es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta: select respuesta0_.id as id4_0_, respuesta0_.correcta as correcta4_0_, respuesta0_.respuesta as respuesta4_0_ from TRESPUESTAS respuesta0_ where respuesta0_.id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida.partidas: select partidas0_.partida_id as partida1_2_2_, partidas0_.partida_id as partida1_2_, partidas0_.usuario_id as usuario2_2_, partidas0_.partida_id as partida1_3_1_, partidas0_.usuario_id as usuario2_3_1_, usuario1_.id as id1_0_, usuario1_.contrasenia as contrase2_1_0_, usuario1_.nombre as nombre1_0_, usuario1_.usuario as usuario1_0_ from TUSUARIOSPARTIDA partidas0_ inner join TUSUARIOS usuario1_ on partidas0_.usuario_id=usuario1_.id where partidas0_.partida_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking.pregunta: select pregunta0_.TRANKING_id as TRANKING1_5_1_, pregunta0_.pregunta_id as pregunta2_1_, pregunta1_.id as id0_0_, pregunta1_.categoria as categoria0_0_, pregunta1_.pregunta as pregunta0_0_ from TRANKING_TPREGUNTAS pregunta0_ inner join TPREGUNTAS pregunta1_ on pregunta0_.pregunta_id=pregunta1_.id where pregunta0_.TRANKING_id=?
DEBUG-> Static select for collection es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta.respuestas: select respuestas0_.TPREGUNTAS_id as TPREGUNTAS1_0_1_, respuestas0_.respuestas_id as respuestas2_1_, respuesta1_.id as id4_0_, respuesta1_.correcta as correcta4_0_, respuesta1_.respuesta as respuesta4_0_ from TPREGUNTAS_TRESPUESTAS respuestas0_ inner join TRESPUESTAS respuesta1_ on respuestas0_.respuestas_id=respuesta1_.id where respuestas0_.TPREGUNTAS_id=?
DEBUG-> Static select for one-to-many es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario.partidas: select partidas0_.usuario_id as usuario2_1_3_, partidas0_.partida_id as partida1_3_, partidas0_.usuario_id as usuario2_3_, partidas0_.partida_id as partida1_3_2_, partidas0_.usuario_id as usuario2_3_2_, partida1_.id as id2_0_, partida1_.puntuacion as puntuacion2_0_, ranking2_.id as id5_1_, ranking2_.PARTIDA_ID as PARTIDA2_5_1_ from TUSUARIOSPARTIDA partidas0_ inner join TPARTIDA partida1_ on partidas0_.partida_id=partida1_.id left outer join TRANKING ranking2_ on partida1_.id=ranking2_.PARTIDA_ID where partidas0_.usuario_id=?
DEBUG-> initializing class SessionFactoryObjectFactory
DEBUG-> registered: 907bf1c5-630b-49b7-a9cd-e695dbcdd614 (unnamed)
INFO-> Not binding factory to JNDI, no JNDI name configured
DEBUG-> instantiated session factory
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Processing hbm.xml files
DEBUG-> Process annotated classes
DEBUG-> processing fk mappings (*ToOne and JoinedSubclass)
DEBUG-> processing extends queue
DEBUG-> processing extends queue
DEBUG-> processing collection mappings
DEBUG-> processing native query and ResultSetMapping mappings
DEBUG-> processing association property references
DEBUG-> processing foreign key constraints
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Respuesta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Ranking
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Pregunta
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Partida
DEBUG-> resolving reference to class: es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
DEBUG-> Setting dialect [org.hibernate.dialect.HSQLDialect]
INFO-> Running hbm2ddl schema export
DEBUG-> import file not found: /import.sql
INFO-> exporting generated schema to database
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79DF91EA6BD
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS drop constraint FK9C6BA79D6B7A9219
DEBUG-> alter table TRANKING drop constraint FK7AFB114276E97130
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2C5A031C4
DEBUG-> alter table TRANKING_TPREGUNTAS drop constraint FKF67007F2CA8D67E4
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A76E97130
DEBUG-> alter table TUSUARIOSPARTIDA drop constraint FKFF16403A2AB62F50
DEBUG-> drop table TPARTIDA if exists
DEBUG-> drop table TPREGUNTAS if exists
DEBUG-> drop table TPREGUNTAS_TRESPUESTAS if exists
DEBUG-> drop table TRANKING if exists
DEBUG-> drop table TRANKING_TPREGUNTAS if exists
DEBUG-> drop table TRESPUESTAS if exists
DEBUG-> drop table TUSUARIOS if exists
DEBUG-> drop table TUSUARIOSPARTIDA if exists
DEBUG-> create table TPARTIDA (id bigint generated by default as identity (start with 1), puntuacion integer, primary key (id))
DEBUG-> create table TPREGUNTAS (id bigint not null, categoria varchar(255), pregunta varchar(255), primary key (id))
DEBUG-> create table TPREGUNTAS_TRESPUESTAS (TPREGUNTAS_id bigint not null, respuestas_id bigint not null, primary key (TPREGUNTAS_id, respuestas_id), unique (respuestas_id))
DEBUG-> create table TRANKING (id bigint not null, PARTIDA_ID bigint, primary key (id))
DEBUG-> create table TRANKING_TPREGUNTAS (TRANKING_id bigint not null, pregunta_id bigint not null, primary key (TRANKING_id, pregunta_id), unique (pregunta_id))
DEBUG-> create table TRESPUESTAS (id bigint not null, correcta bit not null, respuesta varchar(255), primary key (id))
DEBUG-> create table TUSUARIOS (id bigint generated by default as identity (start with 1), contrasenia varchar(255), nombre varchar(255), usuario varchar(255), primary key (id))
DEBUG-> create table TUSUARIOSPARTIDA (partida_id bigint, usuario_id bigint, primary key (partida_id, usuario_id))
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79DF91EA6BD foreign key (respuestas_id) references TRESPUESTAS
DEBUG-> alter table TPREGUNTAS_TRESPUESTAS add constraint FK9C6BA79D6B7A9219 foreign key (TPREGUNTAS_id) references TPREGUNTAS
DEBUG-> alter table TRANKING add constraint FK7AFB114276E97130 foreign key (PARTIDA_ID) references TPARTIDA
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2C5A031C4 foreign key (TRANKING_id) references TRANKING
DEBUG-> alter table TRANKING_TPREGUNTAS add constraint FKF67007F2CA8D67E4 foreign key (pregunta_id) references TPREGUNTAS
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A76E97130 foreign key (partida_id) references TPARTIDA
DEBUG-> alter table TUSUARIOSPARTIDA add constraint FKFF16403A2AB62F50 foreign key (usuario_id) references TUSUARIOS
INFO-> schema export complete
DEBUG-> Checking 1 named HQL queries
DEBUG-> Checking named query: Usuario.findAll
DEBUG-> parse() - HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  |  |  |  |  |  +-[IDENT] Node: 'es'
       |     |  |  |  |  |  |  |  |  |  \-[IDENT] Node: 'uniovi'
       |     |  |  |  |  |  |  |  |  \-[IDENT] Node: 'asw'
       |     |  |  |  |  |  |  |  \-[IDENT] Node: 'trivial'
       |     |  |  |  |  |  |  \-[IDENT] Node: 'db'
       |     |  |  |  |  |  \-[IDENT] Node: 'impl'
       |     |  |  |  |  \-[IDENT] Node: 'local'
       |     |  |  |  \-[IDENT] Node: 'persistencia'
       |     |  |  \-[IDENT] Node: 'model'
       |     |  \-[IDENT] Node: 'Usuario'
       |     \-[ALIAS] Node: 'u'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'u'

DEBUG-> throwQueryException() : no errors
DEBUG-> select << begin [level=1, statement=select]
DEBUG-> FromClause{level=1} :  es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario (u) -> usuario0_
DEBUG-> Resolved :  u -> usuario0_.id
DEBUG-> select : finishing up [level=1, statement=select]
DEBUG-> processQuery() :  ( SELECT ( {select clause} usuario0_.id ) ( FromClause{level=1} TUSUARIOS usuario0_ ) )
DEBUG-> Using FROM fragment [TUSUARIOS usuario0_]
DEBUG-> select >> end [level=1, statement=select]
DEBUG-> --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (TUSUARIOS)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'usuario0_.id as id1_' {alias=u, className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario, tableAlias=usuario0_}
    |  \-[SQL_TOKEN] SqlFragment: 'usuario0_.contrasenia as contrase2_1_, usuario0_.nombre as nombre1_, usuario0_.usuario as usuario1_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[u], fromElementByTableAlias=[usuario0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'TUSUARIOS usuario0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=u,role=null,tableName=TUSUARIOS,tableAlias=usuario0_,origin=null,columns={,className=es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario}}

DEBUG-> throwQueryException() : no errors
DEBUG-> HQL: select u from es.uniovi.asw.trivial.db.impl.local.persistencia.model.Usuario u
DEBUG-> SQL: select usuario0_.id as id1_, usuario0_.contrasenia as contrase2_1_, usuario0_.nombre as nombre1_, usuario0_.usuario as usuario1_ from TUSUARIOS usuario0_
DEBUG-> throwQueryException() : no errors
DEBUG-> Checking 0 named SQL queries
DEBUG-> opened session at timestamp: 14279941250
DEBUG-> begin
DEBUG-> opening JDBC connection
DEBUG-> current autocommit status: true
DEBUG-> disabling autocommit
DEBUG-> commit
DEBUG-> re-enabling autocommit
DEBUG-> committed JDBC Connection
DEBUG-> aggressively releasing JDBC connection
DEBUG-> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
DEBUG-> about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
DEBUG-> opening JDBC connection
DEBUG-> select usuario0_.id as id1_, usuario0_.contrasenia as contrase2_1_, usuario0_.nombre as nombre1_, usuario0_.usuario as usuario1_ from TUSUARIOS usuario0_
DEBUG-> about to open ResultSet (open ResultSets: 0, globally: 0)
DEBUG-> about to close ResultSet (open ResultSets: 1, globally: 1)
DEBUG-> about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
DEBUG-> aggressively releasing JDBC connection
DEBUG-> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
DEBUG-> initializing non-lazy collections
DEBUG-> aggressively releasing JDBC connection
